
Controler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005ba0  08005ba0  00015ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c58  08005c58  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08005c58  08005c58  00015c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c60  08005c60  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c60  08005c60  00015c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c64  08005c64  00015c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08005c68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000100  08005d68  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08005d68  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015afe  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd2  00000000  00000000  00035c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00038800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00039a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022483  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172c9  00000000  00000000  0005cffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd027  00000000  00000000  000742c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001412eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fac  00000000  00000000  0014133c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b88 	.word	0x08005b88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08005b88 	.word	0x08005b88

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_uldivmod>:
 8000aa8:	b953      	cbnz	r3, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aaa:	b94a      	cbnz	r2, 8000ac0 <__aeabi_uldivmod+0x18>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	bf08      	it	eq
 8000ab0:	2800      	cmpeq	r0, #0
 8000ab2:	bf1c      	itt	ne
 8000ab4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab8:	f04f 30ff 	movne.w	r0, #4294967295
 8000abc:	f000 b974 	b.w	8000da8 <__aeabi_idiv0>
 8000ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac8:	f000 f806 	bl	8000ad8 <__udivmoddi4>
 8000acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad4:	b004      	add	sp, #16
 8000ad6:	4770      	bx	lr

08000ad8 <__udivmoddi4>:
 8000ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000adc:	9d08      	ldr	r5, [sp, #32]
 8000ade:	4604      	mov	r4, r0
 8000ae0:	468e      	mov	lr, r1
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d14d      	bne.n	8000b82 <__udivmoddi4+0xaa>
 8000ae6:	428a      	cmp	r2, r1
 8000ae8:	4694      	mov	ip, r2
 8000aea:	d969      	bls.n	8000bc0 <__udivmoddi4+0xe8>
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	b152      	cbz	r2, 8000b08 <__udivmoddi4+0x30>
 8000af2:	fa01 f302 	lsl.w	r3, r1, r2
 8000af6:	f1c2 0120 	rsb	r1, r2, #32
 8000afa:	fa20 f101 	lsr.w	r1, r0, r1
 8000afe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b02:	ea41 0e03 	orr.w	lr, r1, r3
 8000b06:	4094      	lsls	r4, r2
 8000b08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b0c:	0c21      	lsrs	r1, r4, #16
 8000b0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b12:	fa1f f78c 	uxth.w	r7, ip
 8000b16:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b1e:	fb06 f107 	mul.w	r1, r6, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x64>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 811f 	bcs.w	8000d70 <__udivmoddi4+0x298>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 811c 	bls.w	8000d70 <__udivmoddi4+0x298>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 f707 	mul.w	r7, r0, r7
 8000b50:	42a7      	cmp	r7, r4
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x92>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5c:	f080 810a 	bcs.w	8000d74 <__udivmoddi4+0x29c>
 8000b60:	42a7      	cmp	r7, r4
 8000b62:	f240 8107 	bls.w	8000d74 <__udivmoddi4+0x29c>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6e:	1be4      	subs	r4, r4, r7
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa4>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d909      	bls.n	8000b9a <__udivmoddi4+0xc2>
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	f000 80ef 	beq.w	8000d6a <__udivmoddi4+0x292>
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b92:	4630      	mov	r0, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	fab3 f683 	clz	r6, r3
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d14a      	bne.n	8000c38 <__udivmoddi4+0x160>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d302      	bcc.n	8000bac <__udivmoddi4+0xd4>
 8000ba6:	4282      	cmp	r2, r0
 8000ba8:	f200 80f9 	bhi.w	8000d9e <__udivmoddi4+0x2c6>
 8000bac:	1a84      	subs	r4, r0, r2
 8000bae:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	469e      	mov	lr, r3
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	d0e0      	beq.n	8000b7c <__udivmoddi4+0xa4>
 8000bba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bbe:	e7dd      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000bc0:	b902      	cbnz	r2, 8000bc4 <__udivmoddi4+0xec>
 8000bc2:	deff      	udf	#255	; 0xff
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	f040 8092 	bne.w	8000cf2 <__udivmoddi4+0x21a>
 8000bce:	eba1 010c 	sub.w	r1, r1, ip
 8000bd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	2601      	movs	r6, #1
 8000bdc:	0c20      	lsrs	r0, r4, #16
 8000bde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be2:	fb07 1113 	mls	r1, r7, r3, r1
 8000be6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bea:	fb0e f003 	mul.w	r0, lr, r3
 8000bee:	4288      	cmp	r0, r1
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x12c>
 8000bf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x12a>
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	f200 80cb 	bhi.w	8000d98 <__udivmoddi4+0x2c0>
 8000c02:	4643      	mov	r3, r8
 8000c04:	1a09      	subs	r1, r1, r0
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c14:	fb0e fe00 	mul.w	lr, lr, r0
 8000c18:	45a6      	cmp	lr, r4
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x156>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d202      	bcs.n	8000c2c <__udivmoddi4+0x154>
 8000c26:	45a6      	cmp	lr, r4
 8000c28:	f200 80bb 	bhi.w	8000da2 <__udivmoddi4+0x2ca>
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	eba4 040e 	sub.w	r4, r4, lr
 8000c32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c36:	e79c      	b.n	8000b72 <__udivmoddi4+0x9a>
 8000c38:	f1c6 0720 	rsb	r7, r6, #32
 8000c3c:	40b3      	lsls	r3, r6
 8000c3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c46:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c4e:	431c      	orrs	r4, r3
 8000c50:	40f9      	lsrs	r1, r7
 8000c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c56:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c5e:	0c20      	lsrs	r0, r4, #16
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	fb09 1118 	mls	r1, r9, r8, r1
 8000c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000c70:	4288      	cmp	r0, r1
 8000c72:	fa02 f206 	lsl.w	r2, r2, r6
 8000c76:	d90b      	bls.n	8000c90 <__udivmoddi4+0x1b8>
 8000c78:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c80:	f080 8088 	bcs.w	8000d94 <__udivmoddi4+0x2bc>
 8000c84:	4288      	cmp	r0, r1
 8000c86:	f240 8085 	bls.w	8000d94 <__udivmoddi4+0x2bc>
 8000c8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8e:	4461      	add	r1, ip
 8000c90:	1a09      	subs	r1, r1, r0
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c98:	fb09 1110 	mls	r1, r9, r0, r1
 8000c9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca4:	458e      	cmp	lr, r1
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x1e2>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb0:	d26c      	bcs.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb2:	458e      	cmp	lr, r1
 8000cb4:	d96a      	bls.n	8000d8c <__udivmoddi4+0x2b4>
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	4461      	add	r1, ip
 8000cba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc2:	eba1 010e 	sub.w	r1, r1, lr
 8000cc6:	42a1      	cmp	r1, r4
 8000cc8:	46c8      	mov	r8, r9
 8000cca:	46a6      	mov	lr, r4
 8000ccc:	d356      	bcc.n	8000d7c <__udivmoddi4+0x2a4>
 8000cce:	d053      	beq.n	8000d78 <__udivmoddi4+0x2a0>
 8000cd0:	b15d      	cbz	r5, 8000cea <__udivmoddi4+0x212>
 8000cd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000cd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000cda:	fa01 f707 	lsl.w	r7, r1, r7
 8000cde:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce2:	40f1      	lsrs	r1, r6
 8000ce4:	431f      	orrs	r7, r3
 8000ce6:	e9c5 7100 	strd	r7, r1, [r5]
 8000cea:	2600      	movs	r6, #0
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	40d8      	lsrs	r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000d00:	4091      	lsls	r1, r2
 8000d02:	4301      	orrs	r1, r0
 8000d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d08:	fa1f fe8c 	uxth.w	lr, ip
 8000d0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d10:	fb07 3610 	mls	r6, r7, r0, r3
 8000d14:	0c0b      	lsrs	r3, r1, #16
 8000d16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	fa04 f402 	lsl.w	r4, r4, r2
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x260>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2e:	d22f      	bcs.n	8000d90 <__udivmoddi4+0x2b8>
 8000d30:	429e      	cmp	r6, r3
 8000d32:	d92d      	bls.n	8000d90 <__udivmoddi4+0x2b8>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	b289      	uxth	r1, r1
 8000d3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d40:	fb07 3316 	mls	r3, r7, r6, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb06 f30e 	mul.w	r3, r6, lr
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x28a>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d58:	d216      	bcs.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d914      	bls.n	8000d88 <__udivmoddi4+0x2b0>
 8000d5e:	3e02      	subs	r6, #2
 8000d60:	4461      	add	r1, ip
 8000d62:	1ac9      	subs	r1, r1, r3
 8000d64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d68:	e738      	b.n	8000bdc <__udivmoddi4+0x104>
 8000d6a:	462e      	mov	r6, r5
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e705      	b.n	8000b7c <__udivmoddi4+0xa4>
 8000d70:	4606      	mov	r6, r0
 8000d72:	e6e3      	b.n	8000b3c <__udivmoddi4+0x64>
 8000d74:	4618      	mov	r0, r3
 8000d76:	e6f8      	b.n	8000b6a <__udivmoddi4+0x92>
 8000d78:	454b      	cmp	r3, r9
 8000d7a:	d2a9      	bcs.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d84:	3801      	subs	r0, #1
 8000d86:	e7a3      	b.n	8000cd0 <__udivmoddi4+0x1f8>
 8000d88:	4646      	mov	r6, r8
 8000d8a:	e7ea      	b.n	8000d62 <__udivmoddi4+0x28a>
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	e794      	b.n	8000cba <__udivmoddi4+0x1e2>
 8000d90:	4640      	mov	r0, r8
 8000d92:	e7d1      	b.n	8000d38 <__udivmoddi4+0x260>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	e77b      	b.n	8000c90 <__udivmoddi4+0x1b8>
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	e732      	b.n	8000c04 <__udivmoddi4+0x12c>
 8000d9e:	4630      	mov	r0, r6
 8000da0:	e709      	b.n	8000bb6 <__udivmoddi4+0xde>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e742      	b.n	8000c2e <__udivmoddi4+0x156>

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_GPIO_Init+0x8c>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	480b      	ldr	r0, [pc, #44]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000e10:	f001 fa58 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000e14:	2308      	movs	r3, #8
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000e2c:	f001 f8e0 	bl	8001ff0 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400

08000e40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_I2C1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <MX_I2C1_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e7c:	f001 fa54 	bl	8002328 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 f93b 	bl	8001100 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000e8e:	f001 ffaf 	bl	8002df0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 f932 	bl	8001100 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_I2C1_Init+0x74>)
 8000ea0:	f001 fff1 	bl	8002e86 <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f929 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000011c 	.word	0x2000011c
 8000eb8:	40005400 	.word	0x40005400
 8000ebc:	00707cbb 	.word	0x00707cbb

08000ec0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09e      	sub	sp, #120	; 0x78
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2254      	movs	r2, #84	; 0x54
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 faf5 	bl	80054d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_I2C_MspInit+0xa8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d137      	bne.n	8000f60 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ef0:	2340      	movs	r3, #64	; 0x40
 8000ef2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 febb 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f08:	f000 f8fa 	bl	8001100 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f001 f854 	bl	8001ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3778      	adds	r7, #120	; 0x78
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
    if(htim == &htim2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d11f      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
    {
    	if(f_initialized == 1)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d11b      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
    	{
    		MPU6050_Read_All(&hi2c1, &mpu);
 8000f88:	4911      	ldr	r1, [pc, #68]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f8a:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f8c:	f000 f914 	bl	80011b8 <MPU6050_Read_All>
    		if(ParseAccelAngles(TxBuf, TxBuf_SIZE, &mpu) == HAL_OK)
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f92:	2118      	movs	r1, #24
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000f96:	f000 fc50 	bl	800183a <ParseAccelAngles>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d10f      	bne.n	8000fc0 <HAL_TIM_PeriodElapsedCallback+0x50>
    		{
    			HAL_UART_Transmit(&huart1, TxBuf, TxBuf_SIZE,100);
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	2218      	movs	r2, #24
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fa8:	f003 fdea 	bl	8004b80 <HAL_UART_Transmit>
    			HAL_UART_Transmit(&huart2, TxBuf, TxBuf_SIZE,100);
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2218      	movs	r2, #24
 8000fb0:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000fb4:	f003 fde4 	bl	8004b80 <HAL_UART_Transmit>
    			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000fb8:	2108      	movs	r1, #8
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fbc:	f001 f99a 	bl	80022f4 <HAL_GPIO_TogglePin>
    		}
    	}
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200001ec 	.word	0x200001ec
 8000fcc:	20000170 	.word	0x20000170
 8000fd0:	20000178 	.word	0x20000178
 8000fd4:	2000011c 	.word	0x2000011c
 8000fd8:	200001d0 	.word	0x200001d0
 8000fdc:	20000238 	.word	0x20000238
 8000fe0:	200002bc 	.word	0x200002bc
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f000 fe79 	bl	8001ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f824 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f7ff feda 	bl	8000dac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ff8:	f7ff ff22 	bl	8000e40 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ffc:	f000 fd3e 	bl	8001a7c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001000:	f000 fcca 	bl	8001998 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001004:	f000 fd6a 	bl	8001adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(MPU6050_Init(&hi2c1))
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <main+0x48>)
 800100a:	f000 f87e 	bl	800110a <MPU6050_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <main+0x30>
    {
  	  Error_Handler();
 8001014:	f000 f874 	bl	8001100 <Error_Handler>
    }

    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <main+0x4c>)
 800101a:	f003 f97d 	bl	8004318 <HAL_TIM_Base_Start_IT>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <main+0x40>
    {
  	  Error_Handler();
 8001024:	f000 f86c 	bl	8001100 <Error_Handler>
    }

    f_initialized = 1;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <main+0x50>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
  //HAL_UART_Transmit(&huart1, test, 4, 10);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102e:	e7fe      	b.n	800102e <main+0x46>
 8001030:	2000011c 	.word	0x2000011c
 8001034:	200001ec 	.word	0x200001ec
 8001038:	20000170 	.word	0x20000170

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2244      	movs	r2, #68	; 0x44
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fa40 	bl	80054d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800105e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001062:	f001 ff7b 	bl	8002f5c <HAL_PWREx_ControlVoltageScaling>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800106c:	f000 f848 	bl	8001100 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001070:	f001 ff56 	bl	8002f20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <SystemClock_Config+0xc0>)
 8001076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <SystemClock_Config+0xc0>)
 800107c:	f023 0318 	bic.w	r3, r3, #24
 8001080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001084:	2314      	movs	r3, #20
 8001086:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001098:	2302      	movs	r3, #2
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800109c:	2301      	movs	r3, #1
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010a4:	2310      	movs	r3, #16
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 ffa5 	bl	8003008 <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f81c 	bl	8001100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010cc:	2303      	movs	r3, #3
 80010ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2101      	movs	r1, #1
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fba5 	bl	8003830 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010ec:	f000 f808 	bl	8001100 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010f0:	f002 ffb8 	bl	8004064 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	; 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000

08001100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001108:	e7fe      	b.n	8001108 <Error_Handler+0x8>

0800110a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b088      	sub	sp, #32
 800110e:	af04      	add	r7, sp, #16
 8001110:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 030f 	add.w	r3, r7, #15
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	2275      	movs	r2, #117	; 0x75
 8001124:	21d0      	movs	r1, #208	; 0xd0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 faa2 	bl	8002670 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b68      	cmp	r3, #104	; 0x68
 8001130:	d13d      	bne.n	80011ae <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001136:	2364      	movs	r3, #100	; 0x64
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f107 030e 	add.w	r3, r7, #14
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	226b      	movs	r2, #107	; 0x6b
 8001148:	21d0      	movs	r1, #208	; 0xd0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 f97c 	bl	8002448 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001150:	2307      	movs	r3, #7
 8001152:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 030e 	add.w	r3, r7, #14
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	2219      	movs	r2, #25
 8001166:	21d0      	movs	r1, #208	; 0xd0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 f96d 	bl	8002448 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	9302      	str	r3, [sp, #8]
 8001176:	2301      	movs	r3, #1
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	f107 030e 	add.w	r3, r7, #14
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	221c      	movs	r2, #28
 8001184:	21d0      	movs	r1, #208	; 0xd0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f95e 	bl	8002448 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001190:	2364      	movs	r3, #100	; 0x64
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 030e 	add.w	r3, r7, #14
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	221b      	movs	r2, #27
 80011a2:	21d0      	movs	r1, #208	; 0xd0
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f001 f94f 	bl	8002448 <HAL_I2C_Mem_Write>
        return 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <MPU6050_Init+0xa6>
    }
    return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80011b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011bc:	b094      	sub	sp, #80	; 0x50
 80011be:	af04      	add	r7, sp, #16
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	230e      	movs	r3, #14
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	223b      	movs	r2, #59	; 0x3b
 80011d6:	21d0      	movs	r1, #208	; 0xd0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f001 fa49 	bl	8002670 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80011de:	7a3b      	ldrb	r3, [r7, #8]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7a7b      	ldrb	r3, [r7, #9]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80011f0:	7abb      	ldrb	r3, [r7, #10]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001202:	7b3b      	ldrb	r3, [r7, #12]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001214:	7bbb      	ldrb	r3, [r7, #14]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7c7b      	ldrb	r3, [r7, #17]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001234:	7cbb      	ldrb	r3, [r7, #18]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	7cfb      	ldrb	r3, [r7, #19]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21a      	sxth	r2, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001246:	7d3b      	ldrb	r3, [r7, #20]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	7d7b      	ldrb	r3, [r7, #21]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	b21a      	sxth	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f908 	bl	8000474 <__aeabi_i2d>
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4bbd      	ldr	r3, [pc, #756]	; (8001560 <MPU6050_Read_All+0x3a8>)
 800126a:	f7ff fa97 	bl	800079c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f8f8 	bl	8000474 <__aeabi_i2d>
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <MPU6050_Read_All+0x3a8>)
 800128a:	f7ff fa87 	bl	800079c <__aeabi_ddiv>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	6839      	ldr	r1, [r7, #0]
 8001294:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8e8 	bl	8000474 <__aeabi_i2d>
 80012a4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001548 <MPU6050_Read_All+0x390>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff fa77 	bl	800079c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80012b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001564 <MPU6050_Read_All+0x3ac>
 80012c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012cc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001568 <MPU6050_Read_All+0x3b0>
 80012d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f8c7 	bl	8000474 <__aeabi_i2d>
 80012e6:	a39a      	add	r3, pc, #616	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff fa56 	bl	800079c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f8b7 	bl	8000474 <__aeabi_i2d>
 8001306:	a392      	add	r3, pc, #584	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff fa46 	bl	800079c <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8a7 	bl	8000474 <__aeabi_i2d>
 8001326:	a38a      	add	r3, pc, #552	; (adr r3, 8001550 <MPU6050_Read_All+0x398>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	f7ff fa36 	bl	800079c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800133a:	f000 fd3b 	bl	8001db4 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	4b8a      	ldr	r3, [pc, #552]	; (800156c <MPU6050_Read_All+0x3b4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f884 	bl	8000454 <__aeabi_ui2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b87      	ldr	r3, [pc, #540]	; (8001570 <MPU6050_Read_All+0x3b8>)
 8001352:	f7ff fa23 	bl	800079c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800135e:	f000 fd29 	bl	8001db4 <HAL_GetTick>
 8001362:	4603      	mov	r3, r0
 8001364:	4a81      	ldr	r2, [pc, #516]	; (800156c <MPU6050_Read_All+0x3b4>)
 8001366:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136e:	461a      	mov	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001376:	fb03 f202 	mul.w	r2, r3, r2
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001380:	4619      	mov	r1, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001388:	fb01 f303 	mul.w	r3, r1, r3
 800138c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f870 	bl	8000474 <__aeabi_i2d>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	ec43 2b10 	vmov	d0, r2, r3
 800139c:	f004 fa4b 	bl	8005836 <sqrt>
 80013a0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b0:	f7ff fb32 	bl	8000a18 <__aeabi_dcmpeq>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d11f      	bne.n	80013fa <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f857 	bl	8000474 <__aeabi_i2d>
 80013c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ca:	f7ff f9e7 	bl	800079c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ec43 2b17 	vmov	d7, r2, r3
 80013d6:	eeb0 0a47 	vmov.f32	s0, s14
 80013da:	eef0 0a67 	vmov.f32	s1, s15
 80013de:	f004 f87f 	bl	80054e0 <atan>
 80013e2:	ec51 0b10 	vmov	r0, r1, d0
 80013e6:	a35c      	add	r3, pc, #368	; (adr r3, 8001558 <MPU6050_Read_All+0x3a0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013f8:	e005      	b.n	8001406 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	425b      	negs	r3, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f830 	bl	8000474 <__aeabi_i2d>
 8001414:	4682      	mov	sl, r0
 8001416:	468b      	mov	fp, r1
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f828 	bl	8000474 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	ec43 2b11 	vmov	d1, r2, r3
 800142c:	ec4b ab10 	vmov	d0, sl, fp
 8001430:	f004 f9ff 	bl	8005832 <atan2>
 8001434:	ec51 0b10 	vmov	r0, r1, d0
 8001438:	a347      	add	r3, pc, #284	; (adr r3, 8001558 <MPU6050_Read_All+0x3a0>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f883 	bl	8000548 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <MPU6050_Read_All+0x3bc>)
 8001450:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001454:	f7ff faea 	bl	8000a2c <__aeabi_dcmplt>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <MPU6050_Read_All+0x2bc>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <MPU6050_Read_All+0x3c0>)
 800146a:	f7ff fafd 	bl	8000a68 <__aeabi_dcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d114      	bne.n	800149e <MPU6050_Read_All+0x2e6>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <MPU6050_Read_All+0x3c0>)
 800147a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800147e:	f7ff faf3 	bl	8000a68 <__aeabi_dcmpgt>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d015      	beq.n	80014b4 <MPU6050_Read_All+0x2fc>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MPU6050_Read_All+0x3bc>)
 8001494:	f7ff faca 	bl	8000a2c <__aeabi_dcmplt>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800149e:	4937      	ldr	r1, [pc, #220]	; (800157c <MPU6050_Read_All+0x3c4>)
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80014b2:	e014      	b.n	80014de <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80014ba:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80014be:	eeb0 1a47 	vmov.f32	s2, s14
 80014c2:	eef0 1a67 	vmov.f32	s3, s15
 80014c6:	ed97 0b06 	vldr	d0, [r7, #24]
 80014ca:	482c      	ldr	r0, [pc, #176]	; (800157c <MPU6050_Read_All+0x3c4>)
 80014cc:	f000 f85a 	bl	8001584 <Kalman_getAngle>
 80014d0:	eeb0 7a40 	vmov.f32	s14, s0
 80014d4:	eef0 7a60 	vmov.f32	s15, s1
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80014e4:	4690      	mov	r8, r2
 80014e6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MPU6050_Read_All+0x3c0>)
 80014f0:	4640      	mov	r0, r8
 80014f2:	4649      	mov	r1, r9
 80014f4:	f7ff fab8 	bl	8000a68 <__aeabi_dcmpgt>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001504:	4614      	mov	r4, r2
 8001506:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001516:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800151a:	eeb0 1a47 	vmov.f32	s2, s14
 800151e:	eef0 1a67 	vmov.f32	s3, s15
 8001522:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <MPU6050_Read_All+0x3c8>)
 8001528:	f000 f82c 	bl	8001584 <Kalman_getAngle>
 800152c:	eeb0 7a40 	vmov.f32	s14, s0
 8001530:	eef0 7a60 	vmov.f32	s15, s1
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800153a:	bf00      	nop
 800153c:	3740      	adds	r7, #64	; 0x40
 800153e:	46bd      	mov	sp, r7
 8001540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001544:	f3af 8000 	nop.w
 8001548:	00000000 	.word	0x00000000
 800154c:	40cc2900 	.word	0x40cc2900
 8001550:	00000000 	.word	0x00000000
 8001554:	40606000 	.word	0x40606000
 8001558:	1a63c1f8 	.word	0x1a63c1f8
 800155c:	404ca5dc 	.word	0x404ca5dc
 8001560:	40d00000 	.word	0x40d00000
 8001564:	43aa0000 	.word	0x43aa0000
 8001568:	42121eb8 	.word	0x42121eb8
 800156c:	200001e8 	.word	0x200001e8
 8001570:	408f4000 	.word	0x408f4000
 8001574:	c0568000 	.word	0xc0568000
 8001578:	40568000 	.word	0x40568000
 800157c:	20000048 	.word	0x20000048
 8001580:	20000000 	.word	0x20000000

08001584 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
 800158a:	61f8      	str	r0, [r7, #28]
 800158c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001590:	ed87 1b02 	vstr	d1, [r7, #8]
 8001594:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800159e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015a2:	f7fe fe19 	bl	80001d8 <__aeabi_dsub>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80015b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80015b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7fe fe08 	bl	80001dc <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	69f9      	ldr	r1, [r7, #28]
 80015d2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80015e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015e6:	f7fe ffaf 	bl	8000548 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015f8:	f7fe fdee 	bl	80001d8 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800160a:	f7fe fde5 	bl	80001d8 <__aeabi_dsub>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe fdde 	bl	80001dc <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fdd0 	bl	80001dc <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	69f9      	ldr	r1, [r7, #28]
 8001642:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001652:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001656:	f7fe ff77 	bl	8000548 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe fdb9 	bl	80001d8 <__aeabi_dsub>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	69f9      	ldr	r1, [r7, #28]
 800166c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800167c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fda4 	bl	80001d8 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	69f9      	ldr	r1, [r7, #28]
 8001696:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016aa:	f7fe ff4d 	bl	8000548 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4620      	mov	r0, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f7fe fd91 	bl	80001dc <__adddf3>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	69f9      	ldr	r1, [r7, #28]
 80016c0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016d0:	f7fe fd84 	bl	80001dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80016e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016e6:	f7ff f859 	bl	800079c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016fc:	f7ff f84e 	bl	800079c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800170e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001712:	f7fe fd61 	bl	80001d8 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001724:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd50 	bl	80001dc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	69f9      	ldr	r1, [r7, #28]
 8001742:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800174c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001750:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd3c 	bl	80001dc <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	69f9      	ldr	r1, [r7, #28]
 800176a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001774:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800177e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001788:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001790:	f7fe feda 	bl	8000548 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd1c 	bl	80001d8 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	69f9      	ldr	r1, [r7, #28]
 80017a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80017b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017b8:	f7fe fec6 	bl	8000548 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd08 	bl	80001d8 <__aeabi_dsub>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	69f9      	ldr	r1, [r7, #28]
 80017ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80017d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017e0:	f7fe feb2 	bl	8000548 <__aeabi_dmul>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4620      	mov	r0, r4
 80017ea:	4629      	mov	r1, r5
 80017ec:	f7fe fcf4 	bl	80001d8 <__aeabi_dsub>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	69f9      	ldr	r1, [r7, #28]
 80017f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001800:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001808:	f7fe fe9e 	bl	8000548 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7fe fce0 	bl	80001d8 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	69f9      	ldr	r1, [r7, #28]
 800181e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001828:	ec43 2b17 	vmov	d7, r2, r3
};
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	3758      	adds	r7, #88	; 0x58
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}

0800183a <ParseAccelAngles>:
#include "parser.h"
#include "stdio.h"
#include "string.h"

HAL_StatusTypeDef ParseAccelAngles(uint8_t *data, uint16_t size, MPU6050_t *mpu)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	460b      	mov	r3, r1
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	817b      	strh	r3, [r7, #10]
	uint8_t end[2] = {'\r', '\n'};
 8001848:	f640 230d 	movw	r3, #2573	; 0xa0d
 800184c:	82bb      	strh	r3, [r7, #20]

	if(size < (sizeof(mpu->Accel_X_RAW)
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	2b17      	cmp	r3, #23
 8001852:	d801      	bhi.n	8001858 <ParseAccelAngles+0x1e>
				+ sizeof(mpu->Accel_Z_RAW)
				+ sizeof(mpu->KalmanAngleX)
				+ sizeof(mpu->KalmanAngleY)
				+ sizeof(end)))
	{
		return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e031      	b.n	80018bc <ParseAccelAngles+0x82>
	}


	memcpy(data, (uint8_t *)&(mpu->Accel_X_RAW), sizeof(mpu->Accel_X_RAW));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	801a      	strh	r2, [r3, #0]
	data += sizeof(mpu->Accel_X_RAW);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3302      	adds	r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
	memcpy(data, (uint8_t *)&(mpu->Accel_Y_RAW), sizeof(mpu->Accel_Y_RAW));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3302      	adds	r3, #2
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	801a      	strh	r2, [r3, #0]
	data += sizeof(mpu->Accel_Y_RAW);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3302      	adds	r3, #2
 8001878:	60fb      	str	r3, [r7, #12]
	memcpy(data, (uint8_t *)&(mpu->Accel_Z_RAW), sizeof(mpu->Accel_Z_RAW));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	801a      	strh	r2, [r3, #0]
	data += sizeof(mpu->Accel_Z_RAW);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3302      	adds	r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
	memcpy(data, (uint8_t *)&(mpu->KalmanAngleX), sizeof(mpu->KalmanAngleX));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3348      	adds	r3, #72	; 0x48
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f003 fe0d 	bl	80054b4 <memcpy>
	data += sizeof(mpu->KalmanAngleX);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	3308      	adds	r3, #8
 800189e:	60fb      	str	r3, [r7, #12]
	memcpy(data, (uint8_t *)&(mpu->KalmanAngleY), sizeof(mpu->KalmanAngleY));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3350      	adds	r3, #80	; 0x50
 80018a4:	2208      	movs	r2, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f003 fe03 	bl	80054b4 <memcpy>
	data += sizeof(mpu->KalmanAngleY);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3308      	adds	r3, #8
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	8aba      	ldrh	r2, [r7, #20]
	memcpy(data, end, sizeof(end));
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_MspInit+0x44>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_MspInit+0x44>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6613      	str	r3, [r2, #96]	; 0x60
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_MspInit+0x44>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_MspInit+0x44>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_MspInit+0x44>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6593      	str	r3, [r2, #88]	; 0x58
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_MspInit+0x44>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <MemManage_Handler+0x4>

0800191e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <UsageFault_Handler+0x4>

0800192a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001958:	f000 fa18 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <TIM2_IRQHandler+0x10>)
 8001966:	f002 fd2b 	bl	80043c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001ec 	.word	0x200001ec

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b6:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3199;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019c0:	f640 427f 	movw	r2, #3199	; 0xc7f
 80019c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80019d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e0:	4813      	ldr	r0, [pc, #76]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019e2:	f002 fc41 	bl	8004268 <HAL_TIM_Base_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80019ec:	f7ff fb88 	bl	8001100 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <MX_TIM2_Init+0x98>)
 80019fe:	f002 fdfe 	bl	80045fe <HAL_TIM_ConfigClockSource>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a08:	f7ff fb7a 	bl	8001100 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_TIM2_Init+0x98>)
 8001a1a:	f002 ffdf 	bl	80049dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a24:	f7ff fb6c 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001ec 	.word	0x200001ec

08001a34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d113      	bne.n	8001a6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_TIM_Base_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <HAL_TIM_Base_MspInit+0x44>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_TIM_Base_MspInit+0x44>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	201c      	movs	r0, #28
 8001a64:	f000 fa8d 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a68:	201c      	movs	r0, #28
 8001a6a:	f000 faa6 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000

08001a7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_USART1_UART_Init+0x5c>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a88:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART1_UART_Init+0x58>)
 8001ac0:	f003 f810 	bl	8004ae4 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aca:	f7ff fb19 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000238 	.word	0x20000238
 8001ad8:	40013800 	.word	0x40013800

08001adc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART2_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b20:	f002 ffe0 	bl	8004ae4 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f7ff fae9 	bl	8001100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002bc 	.word	0x200002bc
 8001b38:	40004400 	.word	0x40004400

08001b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0a0      	sub	sp, #128	; 0x80
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	f107 0318 	add.w	r3, r7, #24
 8001b58:	2254      	movs	r2, #84	; 0x54
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fcb7 	bl	80054d0 <memset>
  if(uartHandle->Instance==USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a46      	ldr	r2, [pc, #280]	; (8001c80 <HAL_UART_MspInit+0x144>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d136      	bne.n	8001bda <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 f87d 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b84:	f7ff fabc 	bl	8001100 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b88:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8c:	4a3d      	ldr	r2, [pc, #244]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b92:	6613      	str	r3, [r2, #96]	; 0x60
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a37      	ldr	r2, [pc, #220]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb8:	23c0      	movs	r3, #192	; 0xc0
 8001bba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	482d      	ldr	r0, [pc, #180]	; (8001c88 <HAL_UART_MspInit+0x14c>)
 8001bd4:	f000 fa0c 	bl	8001ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bd8:	e04d      	b.n	8001c76 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_UART_MspInit+0x150>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d148      	bne.n	8001c76 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 f841 	bl	8003c78 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001bfc:	f7ff fa80 	bl	8001100 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_UART_MspInit+0x148>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c30:	2304      	movs	r3, #4
 8001c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c40:	2307      	movs	r3, #7
 8001c42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f000 f9cf 	bl	8001ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c64:	2303      	movs	r3, #3
 8001c66:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f000 f9bd 	bl	8001ff0 <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3780      	adds	r7, #128	; 0x80
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40013800 	.word	0x40013800
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	40004400 	.word	0x40004400

08001c90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c94:	f7ff fe6e 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	; (8001cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <LoopForever+0xe>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	; (8001cdc <LoopForever+0x16>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cbe:	f003 fbd5 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cc2:	f7ff f991 	bl	8000fe8 <main>

08001cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cc6:	e7fe      	b.n	8001cc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001cd4:	08005c68 	.word	0x08005c68
  ldr r2, =_sbss
 8001cd8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001cdc:	20000344 	.word	0x20000344

08001ce0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC1_IRQHandler>

08001ce2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f93d 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f000 f80e 	bl	8001d14 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	e001      	b.n	8001d08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d04:	f7ff fdde 	bl	80018c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <HAL_InitTick+0x6c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d023      	beq.n	8001d70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_InitTick+0x70>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_InitTick+0x6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f949 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10f      	bne.n	8001d6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d809      	bhi.n	8001d64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f913 	bl	8001f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_InitTick+0x74>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e004      	b.n	8001d74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
 8001d6e:	e001      	b.n	8001d74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000098 	.word	0x20000098
 8001d84:	20000090 	.word	0x20000090
 8001d88:	20000094 	.word	0x20000094

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000098 	.word	0x20000098
 8001db0:	20000340 	.word	0x20000340

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000340 	.word	0x20000340

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffe:	e148      	b.n	8002292 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 813a 	beq.w	800228c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <HAL_GPIO_Init+0x40>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0201 	and.w	r2, r3, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b03      	cmp	r3, #3
 800209c:	d017      	beq.n	80020ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d123      	bne.n	8002122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0203 	and.w	r2, r3, #3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8094 	beq.w	800228c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <HAL_GPIO_Init+0x2c0>)
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x2c0>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6613      	str	r3, [r2, #96]	; 0x60
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x2c0>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x2c4>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1d4>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a43      	ldr	r2, [pc, #268]	; (80022b8 <HAL_GPIO_Init+0x2c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1d0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_GPIO_Init+0x2cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1cc>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e004      	b.n	80021c6 <HAL_GPIO_Init+0x1d6>
 80021bc:	2307      	movs	r3, #7
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x1d6>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_GPIO_Init+0x1d6>
 80021c4:	2300      	movs	r3, #0
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	f002 0203 	and.w	r2, r2, #3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4093      	lsls	r3, r2
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021d6:	4937      	ldr	r1, [pc, #220]	; (80022b4 <HAL_GPIO_Init+0x2c4>)
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002208:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002238:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_GPIO_Init+0x2d0>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	f47f aeaf 	bne.w	8002000 <HAL_GPIO_Init+0x10>
  }
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40010000 	.word	0x40010000
 80022b8:	48000400 	.word	0x48000400
 80022bc:	48000800 	.word	0x48000800
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	041a      	lsls	r2, r3, #16
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43d9      	mvns	r1, r3
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	400b      	ands	r3, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e081      	b.n	800243e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fdb6 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002378:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002388:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	e006      	b.n	80023b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d104      	bne.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1a      	ldr	r2, [r3, #32]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4603      	mov	r3, r0
 8002458:	817b      	strh	r3, [r7, #10]
 800245a:	460b      	mov	r3, r1
 800245c:	813b      	strh	r3, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	f040 80f9 	bne.w	8002662 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_I2C_Mem_Write+0x34>
 8002476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0ed      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Write+0x4e>
 8002492:	2302      	movs	r3, #2
 8002494:	e0e6      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800249e:	f7ff fc89 	bl	8001db4 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2319      	movs	r3, #25
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fac3 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d1      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2221      	movs	r2, #33	; 0x21
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e8:	88f8      	ldrh	r0, [r7, #6]
 80024ea:	893a      	ldrh	r2, [r7, #8]
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	4603      	mov	r3, r0
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f9d3 	bl	80028a4 <I2C_RequestMemoryWrite>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0a9      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2bff      	cmp	r3, #255	; 0xff
 8002518:	d90e      	bls.n	8002538 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	22ff      	movs	r2, #255	; 0xff
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fc2b 	bl	8002d8c <I2C_TransferConfig>
 8002536:	e00f      	b.n	8002558 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	b2da      	uxtb	r2, r3
 8002548:	8979      	ldrh	r1, [r7, #10]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fc1a 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 faad 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e07b      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d034      	beq.n	8002610 <HAL_I2C_Mem_Write+0x1c8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d130      	bne.n	8002610 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	2200      	movs	r2, #0
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fa3f 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e04d      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2bff      	cmp	r3, #255	; 0xff
 80025d0:	d90e      	bls.n	80025f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	22ff      	movs	r2, #255	; 0xff
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	2300      	movs	r3, #0
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fbcf 	bl	8002d8c <I2C_TransferConfig>
 80025ee:	e00f      	b.n	8002610 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	8979      	ldrh	r1, [r7, #10]
 8002602:	2300      	movs	r3, #0
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fbbe 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d19e      	bne.n	8002558 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fa8c 	bl	8002b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e01a      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2220      	movs	r2, #32
 8002634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_I2C_Mem_Write+0x224>)
 8002642:	400b      	ands	r3, r1
 8002644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2220      	movs	r2, #32
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	fe00e800 	.word	0xfe00e800

08002670 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	f040 80fd 	bne.w	8002892 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x34>
 800269e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d105      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0f1      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Mem_Read+0x4e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0ea      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c6:	f7ff fb75 	bl	8001db4 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f9af 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0d5      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2222      	movs	r2, #34	; 0x22
 80026ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a3a      	ldr	r2, [r7, #32]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	8979      	ldrh	r1, [r7, #10]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4603      	mov	r3, r0
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f913 	bl	800294c <I2C_RequestMemoryRead>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0ad      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2bff      	cmp	r3, #255	; 0xff
 8002740:	d90e      	bls.n	8002760 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274c:	b2da      	uxtb	r2, r3
 800274e:	8979      	ldrh	r1, [r7, #10]
 8002750:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_I2C_Mem_Read+0x22c>)
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 fb17 	bl	8002d8c <I2C_TransferConfig>
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276e:	b2da      	uxtb	r2, r3
 8002770:	8979      	ldrh	r1, [r7, #10]
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_I2C_Mem_Read+0x22c>)
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb06 	bl	8002d8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2200      	movs	r2, #0
 8002788:	2104      	movs	r1, #4
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f956 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e07c      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d034      	beq.n	8002840 <HAL_I2C_Mem_Read+0x1d0>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d130      	bne.n	8002840 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f927 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04d      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	d90e      	bls.n	8002820 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	22ff      	movs	r2, #255	; 0xff
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	b2da      	uxtb	r2, r3
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	2300      	movs	r3, #0
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fab7 	bl	8002d8c <I2C_TransferConfig>
 800281e:	e00f      	b.n	8002840 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	b2da      	uxtb	r2, r3
 8002830:	8979      	ldrh	r1, [r7, #10]
 8002832:	2300      	movs	r3, #0
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 faa6 	bl	8002d8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d19a      	bne.n	8002780 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f974 	bl	8002b3c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e01a      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2220      	movs	r2, #32
 8002864:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_I2C_Mem_Read+0x230>)
 8002872:	400b      	ands	r3, r1
 8002874:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	80002400 	.word	0x80002400
 80028a0:	fe00e800 	.word	0xfe00e800

080028a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028be:	88fb      	ldrh	r3, [r7, #6]
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	8979      	ldrh	r1, [r7, #10]
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <I2C_RequestMemoryWrite+0xa4>)
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fa5d 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8f0 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e02c      	b.n	8002940 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
 80028f6:	e015      	b.n	8002924 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	69b9      	ldr	r1, [r7, #24]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f8d6 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e012      	b.n	8002940 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800291a:	893b      	ldrh	r3, [r7, #8]
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2200      	movs	r2, #0
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f884 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	80002000 	.word	0x80002000

0800294c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4603      	mov	r3, r0
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	460b      	mov	r3, r1
 8002960:	813b      	strh	r3, [r7, #8]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	b2da      	uxtb	r2, r3
 800296a:	8979      	ldrh	r1, [r7, #10]
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <I2C_RequestMemoryRead+0xa4>)
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa0a 	bl	8002d8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f89d 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e02c      	b.n	80029e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
 800299c:	e015      	b.n	80029ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f883 	bl	8002abc <I2C_WaitOnTXISFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e012      	b.n	80029e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c0:	893b      	ldrh	r3, [r7, #8]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2140      	movs	r1, #64	; 0x40
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f831 	bl	8002a3c <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	80002000 	.word	0x80002000

080029f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d103      	bne.n	8002a12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d007      	beq.n	8002a30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	619a      	str	r2, [r3, #24]
  }
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a4c:	e022      	b.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d01e      	beq.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a56:	f7ff f9ad 	bl	8001db4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d302      	bcc.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d113      	bne.n	8002a94 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e00f      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d0cd      	beq.n	8002a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ac8:	e02c      	b.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f870 	bl	8002bb4 <I2C_IsErrorOccurred>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e02a      	b.n	8002b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d01e      	beq.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae6:	f7ff f965 	bl	8001db4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d113      	bne.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e007      	b.n	8002b34 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d1cb      	bne.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b48:	e028      	b.n	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f830 	bl	8002bb4 <I2C_IsErrorOccurred>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e026      	b.n	8002bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7ff f929 	bl	8001db4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d302      	bcc.n	8002b74 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d113      	bne.n	8002b9c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e007      	b.n	8002bac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d1cf      	bne.n	8002b4a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d075      	beq.n	8002ccc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2210      	movs	r2, #16
 8002be6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002be8:	e056      	b.n	8002c98 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d052      	beq.n	8002c98 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7ff f8df 	bl	8001db4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_IsErrorOccurred+0x54>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d147      	bne.n	8002c98 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2a:	d12e      	bne.n	8002c8a <I2C_IsErrorOccurred+0xd6>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c32:	d02a      	beq.n	8002c8a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c34:	7cfb      	ldrb	r3, [r7, #19]
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d027      	beq.n	8002c8a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c4a:	f7ff f8b3 	bl	8001db4 <HAL_GetTick>
 8002c4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c50:	e01b      	b.n	8002c8a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c52:	f7ff f8af 	bl	8001db4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b19      	cmp	r3, #25
 8002c5e:	d914      	bls.n	8002c8a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d1dc      	bne.n	8002c52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d003      	beq.n	8002cae <I2C_IsErrorOccurred+0xfa>
 8002ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d09d      	beq.n	8002bea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00b      	beq.n	8002d18 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01c      	beq.n	8002d7c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff fe56 	bl	80029f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <I2C_IsErrorOccurred+0x1d4>)
 8002d54:	400b      	ands	r3, r1
 8002d56:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	fe00e800 	.word	0xfe00e800

08002d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9e:	897b      	ldrh	r3, [r7, #10]
 8002da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002da4:	7a7b      	ldrb	r3, [r7, #9]
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <I2C_TransferConfig+0x60>)
 8002dcc:	430b      	orrs	r3, r1
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	ea02 0103 	and.w	r1, r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	03ff63ff 	.word	0x03ff63ff

08002df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d138      	bne.n	8002e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e032      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	e000      	b.n	8002e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
  }
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d139      	bne.n	8002f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e033      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2224      	movs	r2, #36	; 0x24
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40007000 	.word	0x40007000

08002f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6a:	d130      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d038      	beq.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f82:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2232      	movs	r2, #50	; 0x32
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa0:	e002      	b.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb4:	d102      	bne.n	8002fbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f2      	bne.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fbc:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc8:	d110      	bne.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e00f      	b.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d007      	beq.n	8002fec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	20000090 	.word	0x20000090
 8003004:	431bde83 	.word	0x431bde83

08003008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f000 bc02 	b.w	8003820 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301c:	4b96      	ldr	r3, [pc, #600]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003026:	4b94      	ldr	r3, [pc, #592]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80e4 	beq.w	8003206 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_RCC_OscConfig+0x4c>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	f040 808b 	bne.w	8003162 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b01      	cmp	r3, #1
 8003050:	f040 8087 	bne.w	8003162 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003054:	4b88      	ldr	r3, [pc, #544]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_OscConfig+0x64>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e3d9      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1a      	ldr	r2, [r3, #32]
 8003070:	4b81      	ldr	r3, [pc, #516]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCC_OscConfig+0x7e>
 800307c:	4b7e      	ldr	r3, [pc, #504]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003084:	e005      	b.n	8003092 <HAL_RCC_OscConfig+0x8a>
 8003086:	4b7c      	ldr	r3, [pc, #496]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003092:	4293      	cmp	r3, r2
 8003094:	d223      	bcs.n	80030de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd8c 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e3ba      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030aa:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a72      	ldr	r2, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	496d      	ldr	r1, [pc, #436]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c8:	4b6b      	ldr	r3, [pc, #428]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	4968      	ldr	r1, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
 80030dc:	e025      	b.n	800312a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	4960      	ldr	r1, [pc, #384]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030fc:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	495b      	ldr	r1, [pc, #364]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fd4c 	bl	8003bb8 <RCC_SetFlashLatencyFromMSIRange>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e37a      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800312a:	f000 fc81 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800312e:	4602      	mov	r2, r0
 8003130:	4b51      	ldr	r3, [pc, #324]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4950      	ldr	r1, [pc, #320]	; (800327c <HAL_RCC_OscConfig+0x274>)
 800313c:	5ccb      	ldrb	r3, [r1, r3]
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	4a4e      	ldr	r2, [pc, #312]	; (8003280 <HAL_RCC_OscConfig+0x278>)
 8003148:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800314a:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <HAL_RCC_OscConfig+0x27c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fde0 	bl	8001d14 <HAL_InitTick>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d052      	beq.n	8003204 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	e35e      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d032      	beq.n	80031d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a42      	ldr	r2, [pc, #264]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003176:	f7fe fe1d 	bl	8001db4 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317e:	f7fe fe19 	bl	8001db4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e347      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a35      	ldr	r2, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4930      	ldr	r1, [pc, #192]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ba:	4b2f      	ldr	r3, [pc, #188]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	492b      	ldr	r1, [pc, #172]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
 80031ce:	e01a      	b.n	8003206 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fdea 	bl	8001db4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e4:	f7fe fde6 	bl	8001db4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e314      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1dc>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d073      	beq.n	80032fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x21c>
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d10e      	bne.n	800323c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d063      	beq.n	80032f8 <HAL_RCC_OscConfig+0x2f0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d15f      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e2f1      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x24c>
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e025      	b.n	80032a0 <HAL_RCC_OscConfig+0x298>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800325c:	d114      	bne.n	8003288 <HAL_RCC_OscConfig+0x280>
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a05      	ldr	r2, [pc, #20]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a02      	ldr	r2, [pc, #8]	; (8003278 <HAL_RCC_OscConfig+0x270>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e013      	b.n	80032a0 <HAL_RCC_OscConfig+0x298>
 8003278:	40021000 	.word	0x40021000
 800327c:	08005ba0 	.word	0x08005ba0
 8003280:	20000090 	.word	0x20000090
 8003284:	20000094 	.word	0x20000094
 8003288:	4ba0      	ldr	r3, [pc, #640]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a9f      	ldr	r2, [pc, #636]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b9d      	ldr	r3, [pc, #628]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a9c      	ldr	r2, [pc, #624]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fd84 	bl	8001db4 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe fd80 	bl	8001db4 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e2ae      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x2a8>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fd70 	bl	8001db4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe fd6c 	bl	8001db4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e29a      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	4b88      	ldr	r3, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x2d0>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d060      	beq.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d005      	beq.n	8003318 <HAL_RCC_OscConfig+0x310>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d119      	bne.n	8003346 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d116      	bne.n	8003346 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003318:	4b7c      	ldr	r3, [pc, #496]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <HAL_RCC_OscConfig+0x328>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e277      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003330:	4b76      	ldr	r3, [pc, #472]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	4973      	ldr	r1, [pc, #460]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003344:	e040      	b.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d023      	beq.n	8003396 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334e:	4b6f      	ldr	r3, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a6e      	ldr	r2, [pc, #440]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe fd2b 	bl	8001db4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003362:	f7fe fd27 	bl	8001db4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e255      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	4b65      	ldr	r3, [pc, #404]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003380:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	495f      	ldr	r1, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
 8003394:	e018      	b.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003396:	4b5d      	ldr	r3, [pc, #372]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5c      	ldr	r2, [pc, #368]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800339c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe fd07 	bl	8001db4 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033aa:	f7fe fd03 	bl	8001db4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e231      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03c      	beq.n	800344e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d01c      	beq.n	8003416 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e2:	4a4a      	ldr	r2, [pc, #296]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ec:	f7fe fce2 	bl	8001db4 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f4:	f7fe fcde 	bl	8001db4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e20c      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003406:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ef      	beq.n	80033f4 <HAL_RCC_OscConfig+0x3ec>
 8003414:	e01b      	b.n	800344e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341c:	4a3b      	ldr	r2, [pc, #236]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fe fcc5 	bl	8001db4 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342e:	f7fe fcc1 	bl	8001db4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1ef      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ef      	bne.n	800342e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 80a6 	beq.w	80035a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003460:	4b2a      	ldr	r3, [pc, #168]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_RCC_OscConfig+0x504>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003484:	2301      	movs	r3, #1
 8003486:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_RCC_OscConfig+0x508>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d118      	bne.n	80034c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_RCC_OscConfig+0x508>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_RCC_OscConfig+0x508>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a0:	f7fe fc88 	bl	8001db4 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fe fc84 	bl	8001db4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e1b2      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <HAL_RCC_OscConfig+0x508>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d108      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4d8>
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034de:	e029      	b.n	8003534 <HAL_RCC_OscConfig+0x52c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d115      	bne.n	8003514 <HAL_RCC_OscConfig+0x50c>
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	4a07      	ldr	r2, [pc, #28]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <HAL_RCC_OscConfig+0x504>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_RCC_OscConfig+0x504>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x52c>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	40007000 	.word	0x40007000
 8003514:	4b9a      	ldr	r3, [pc, #616]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	4a99      	ldr	r2, [pc, #612]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003524:	4b96      	ldr	r3, [pc, #600]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	4a95      	ldr	r2, [pc, #596]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800352c:	f023 0304 	bic.w	r3, r3, #4
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fc3a 	bl	8001db4 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe fc36 	bl	8001db4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e162      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355a:	4b89      	ldr	r3, [pc, #548]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ed      	beq.n	8003544 <HAL_RCC_OscConfig+0x53c>
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356a:	f7fe fc23 	bl	8001db4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003570:	e00a      	b.n	8003588 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fc1f 	bl	8001db4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e14b      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003588:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ed      	bne.n	8003572 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b78      	ldr	r3, [pc, #480]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a0:	4a77      	ldr	r2, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d03c      	beq.n	800362e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035bc:	4b70      	ldr	r3, [pc, #448]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035c2:	4a6f      	ldr	r2, [pc, #444]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe fbf2 	bl	8001db4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d4:	f7fe fbee 	bl	8001db4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e11c      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e6:	4b66      	ldr	r3, [pc, #408]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0ef      	beq.n	80035d4 <HAL_RCC_OscConfig+0x5cc>
 80035f4:	e01b      	b.n	800362e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035f6:	4b62      	ldr	r3, [pc, #392]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035fc:	4a60      	ldr	r2, [pc, #384]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fe fbd5 	bl	8001db4 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360e:	f7fe fbd1 	bl	8001db4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0ff      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003620:	4b57      	ldr	r3, [pc, #348]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1ef      	bne.n	800360e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80f3 	beq.w	800381e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	2b02      	cmp	r3, #2
 800363e:	f040 80c9 	bne.w	80037d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003642:	4b4f      	ldr	r3, [pc, #316]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0203 	and.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	429a      	cmp	r2, r3
 8003654:	d12c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	3b01      	subs	r3, #1
 8003662:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d123      	bne.n	80036b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d11b      	bne.n	80036b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d113      	bne.n	80036b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	085b      	lsrs	r3, r3, #1
 8003694:	3b01      	subs	r3, #1
 8003696:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d109      	bne.n	80036b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d06b      	beq.n	8003788 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d062      	beq.n	800377c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0ac      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c6:	4b2e      	ldr	r3, [pc, #184]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2d      	ldr	r2, [pc, #180]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80036cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d2:	f7fe fb6f 	bl	8001db4 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fb6b 	bl	8001db4 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e099      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ec:	4b24      	ldr	r3, [pc, #144]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	4b21      	ldr	r3, [pc, #132]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCC_OscConfig+0x77c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003708:	3a01      	subs	r2, #1
 800370a:	0112      	lsls	r2, r2, #4
 800370c:	4311      	orrs	r1, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003712:	0212      	lsls	r2, r2, #8
 8003714:	4311      	orrs	r1, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800371a:	0852      	lsrs	r2, r2, #1
 800371c:	3a01      	subs	r2, #1
 800371e:	0552      	lsls	r2, r2, #21
 8003720:	4311      	orrs	r1, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003726:	0852      	lsrs	r2, r2, #1
 8003728:	3a01      	subs	r2, #1
 800372a:	0652      	lsls	r2, r2, #25
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003732:	06d2      	lsls	r2, r2, #27
 8003734:	430a      	orrs	r2, r1
 8003736:	4912      	ldr	r1, [pc, #72]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003738:	4313      	orrs	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a0f      	ldr	r2, [pc, #60]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003754:	f7fe fb2e 	bl	8001db4 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375c:	f7fe fb2a 	bl	8001db4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e058      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <HAL_RCC_OscConfig+0x778>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377a:	e050      	b.n	800381e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e04f      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
 8003780:	40021000 	.word	0x40021000
 8003784:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d144      	bne.n	800381e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003794:	4b24      	ldr	r3, [pc, #144]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037ac:	f7fe fb02 	bl	8001db4 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fafe 	bl	8001db4 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e02c      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x7ac>
 80037d2:	e024      	b.n	800381e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b0c      	cmp	r3, #12
 80037d8:	d01f      	beq.n	800381a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe fae5 	bl	8001db4 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe fae1 	bl	8001db4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e00f      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4905      	ldr	r1, [pc, #20]	; (8003828 <HAL_RCC_OscConfig+0x820>)
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_OscConfig+0x824>)
 8003814:	4013      	ands	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
 8003818:	e001      	b.n	800381e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3720      	adds	r7, #32
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	feeefffc 	.word	0xfeeefffc

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0e7      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003844:	4b75      	ldr	r3, [pc, #468]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d910      	bls.n	8003874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b72      	ldr	r3, [pc, #456]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f023 0207 	bic.w	r2, r3, #7
 800385a:	4970      	ldr	r1, [pc, #448]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b6e      	ldr	r3, [pc, #440]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0cf      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800388c:	429a      	cmp	r2, r3
 800388e:	d908      	bls.n	80038a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003890:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4960      	ldr	r1, [pc, #384]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d04c      	beq.n	8003948 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d121      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0a6      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e09a      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e08e      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f6:	4b4a      	ldr	r3, [pc, #296]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e086      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4943      	ldr	r1, [pc, #268]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe fa4c 	bl	8001db4 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe fa48 	bl	8001db4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e06e      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b3a      	ldr	r3, [pc, #232]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003960:	429a      	cmp	r2, r3
 8003962:	d208      	bcs.n	8003976 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	492b      	ldr	r1, [pc, #172]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d210      	bcs.n	80039a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 0207 	bic.w	r2, r3, #7
 800398c:	4923      	ldr	r1, [pc, #140]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCC_ClockConfig+0x1ec>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d001      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e036      	b.n	8003a14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4918      	ldr	r1, [pc, #96]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d009      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4910      	ldr	r1, [pc, #64]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e4:	f000 f824 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	490b      	ldr	r1, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1f4>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1f8>)
 8003a02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1fc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe f983 	bl	8001d14 <HAL_InitTick>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a12:	7afb      	ldrb	r3, [r7, #11]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40021000 	.word	0x40021000
 8003a24:	08005ba0 	.word	0x08005ba0
 8003a28:	20000090 	.word	0x20000090
 8003a2c:	20000094 	.word	0x20000094

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a48:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b0c      	cmp	r3, #12
 8003a5c:	d121      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d11e      	bne.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a70:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e005      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10d      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa8:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e004      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d134      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d003      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0xac>
 8003ad4:	e005      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad8:	617b      	str	r3, [r7, #20]
      break;
 8003ada:	e005      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	617b      	str	r3, [r7, #20]
      break;
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	617b      	str	r3, [r7, #20]
      break;
 8003ae6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae8:	4b13      	ldr	r3, [pc, #76]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	3301      	adds	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	fb03 f202 	mul.w	r2, r3, r2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0e5b      	lsrs	r3, r3, #25
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	3301      	adds	r3, #1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b28:	69bb      	ldr	r3, [r7, #24]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08005bb8 	.word	0x08005bb8
 8003b40:	00f42400 	.word	0x00f42400
 8003b44:	007a1200 	.word	0x007a1200

08003b48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000090 	.word	0x20000090

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4904      	ldr	r1, [pc, #16]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08005bb0 	.word	0x08005bb0

08003b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b90:	f7ff ffda 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	0adb      	lsrs	r3, r3, #11
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	08005bb0 	.word	0x08005bb0

08003bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd0:	f7ff f9b6 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003bd4:	6178      	str	r0, [r7, #20]
 8003bd6:	e014      	b.n	8003c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f9a6 	bl	8002f40 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c08:	d10b      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d919      	bls.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2ba0      	cmp	r3, #160	; 0xa0
 8003c14:	d902      	bls.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c16:	2302      	movs	r3, #2
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	e013      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e010      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d902      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c28:	2303      	movs	r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	e00a      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d102      	bne.n	8003c3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c34:	2302      	movs	r3, #2
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	e004      	b.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d101      	bne.n	8003c44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f023 0207 	bic.w	r2, r3, #7
 8003c4c:	4909      	ldr	r1, [pc, #36]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40022000 	.word	0x40022000

08003c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c80:	2300      	movs	r3, #0
 8003c82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d031      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c9c:	d01a      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca2:	d814      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cac:	d10f      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a5c      	ldr	r2, [pc, #368]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cba:	e00c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f9de 	bl	8004084 <RCCEx_PLLSAI1_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ccc:	e003      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cdc:	4b51      	ldr	r3, [pc, #324]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	494e      	ldr	r1, [pc, #312]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cf2:	e001      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 809e 	beq.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d0a:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d20:	4b40      	ldr	r3, [pc, #256]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a3f      	ldr	r2, [pc, #252]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3c:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d48:	f7fe f834 	bl	8001db4 <HAL_GetTick>
 8003d4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fe f830 	bl	8001db4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	74fb      	strb	r3, [r7, #19]
        break;
 8003d62:	e005      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d64:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0ef      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d15a      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01e      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d019      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d92:	4b24      	ldr	r3, [pc, #144]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	4a1b      	ldr	r2, [pc, #108]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbe:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d016      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fff0 	bl	8001db4 <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd6:	e00b      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd ffec 	bl	8001db4 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d902      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	74fb      	strb	r3, [r7, #19]
            break;
 8003dee:	e006      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0ec      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003dfe:	7cfb      	ldrb	r3, [r7, #19]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e12:	4904      	ldr	r1, [pc, #16]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e1a:	e009      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1c:	7cfb      	ldrb	r3, [r7, #19]
 8003e1e:	74bb      	strb	r3, [r7, #18]
 8003e20:	e006      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e30:	7c7b      	ldrb	r3, [r7, #17]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e36:	4b8a      	ldr	r3, [pc, #552]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a89      	ldr	r2, [pc, #548]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e4e:	4b84      	ldr	r3, [pc, #528]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f023 0203 	bic.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4980      	ldr	r1, [pc, #512]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e70:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	f023 020c 	bic.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	4978      	ldr	r1, [pc, #480]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e92:	4b73      	ldr	r3, [pc, #460]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	496f      	ldr	r1, [pc, #444]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb4:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	4967      	ldr	r1, [pc, #412]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed6:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	495e      	ldr	r1, [pc, #376]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4956      	ldr	r1, [pc, #344]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	494d      	ldr	r1, [pc, #308]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d028      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f3c:	4b48      	ldr	r3, [pc, #288]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	4945      	ldr	r1, [pc, #276]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a3f      	ldr	r2, [pc, #252]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	e011      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f72:	d10c      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 f882 	bl	8004084 <RCCEx_PLLSAI1_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d028      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	492d      	ldr	r1, [pc, #180]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4a28      	ldr	r2, [pc, #160]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fc4:	60d3      	str	r3, [r2, #12]
 8003fc6:	e011      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f853 	bl	8004084 <RCCEx_PLLSAI1_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01c      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004006:	4916      	ldr	r1, [pc, #88]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004016:	d10c      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f830 	bl	8004084 <RCCEx_PLLSAI1_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800403e:	4b08      	ldr	r3, [pc, #32]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404c:	4904      	ldr	r1, [pc, #16]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004054:	7cbb      	ldrb	r3, [r7, #18]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000

08004064 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a04      	ldr	r2, [pc, #16]	; (8004080 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000

08004084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004092:	4b74      	ldr	r3, [pc, #464]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d018      	beq.n	80040d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800409e:	4b71      	ldr	r3, [pc, #452]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0203 	and.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d10d      	bne.n	80040ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
       ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040b6:	4b6b      	ldr	r3, [pc, #428]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
       ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d047      	beq.n	800415a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
 80040ce:	e044      	b.n	800415a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d018      	beq.n	800410a <RCCEx_PLLSAI1_Config+0x86>
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d825      	bhi.n	8004128 <RCCEx_PLLSAI1_Config+0xa4>
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d002      	beq.n	80040e6 <RCCEx_PLLSAI1_Config+0x62>
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d009      	beq.n	80040f8 <RCCEx_PLLSAI1_Config+0x74>
 80040e4:	e020      	b.n	8004128 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11d      	bne.n	800412e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f6:	e01a      	b.n	800412e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040f8:	4b5a      	ldr	r3, [pc, #360]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004108:	e013      	b.n	8004132 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800410a:	4b56      	ldr	r3, [pc, #344]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10f      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d109      	bne.n	8004136 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004126:	e006      	b.n	8004136 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e004      	b.n	8004138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004136:	bf00      	nop
    }

    if(status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10d      	bne.n	800415a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	3b01      	subs	r3, #1
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	430b      	orrs	r3, r1
 8004154:	4943      	ldr	r1, [pc, #268]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d17c      	bne.n	800425a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004160:	4b40      	ldr	r3, [pc, #256]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800416a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416c:	f7fd fe22 	bl	8001db4 <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004172:	e009      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004174:	f7fd fe1e 	bl	8001db4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d902      	bls.n	8004188 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	73fb      	strb	r3, [r7, #15]
        break;
 8004186:	e005      	b.n	8004194 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ef      	bne.n	8004174 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d15f      	bne.n	800425a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d110      	bne.n	80041c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	0211      	lsls	r1, r2, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	06d2      	lsls	r2, r2, #27
 80041b8:	430a      	orrs	r2, r1
 80041ba:	492a      	ldr	r1, [pc, #168]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	610b      	str	r3, [r1, #16]
 80041c0:	e027      	b.n	8004212 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d112      	bne.n	80041ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6892      	ldr	r2, [r2, #8]
 80041d8:	0211      	lsls	r1, r2, #8
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6912      	ldr	r2, [r2, #16]
 80041de:	0852      	lsrs	r2, r2, #1
 80041e0:	3a01      	subs	r2, #1
 80041e2:	0552      	lsls	r2, r2, #21
 80041e4:	430a      	orrs	r2, r1
 80041e6:	491f      	ldr	r1, [pc, #124]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	610b      	str	r3, [r1, #16]
 80041ec:	e011      	b.n	8004212 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	0211      	lsls	r1, r2, #8
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6952      	ldr	r2, [r2, #20]
 8004204:	0852      	lsrs	r2, r2, #1
 8004206:	3a01      	subs	r2, #1
 8004208:	0652      	lsls	r2, r2, #25
 800420a:	430a      	orrs	r2, r1
 800420c:	4915      	ldr	r1, [pc, #84]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a13      	ldr	r2, [pc, #76]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800421c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd fdc9 	bl	8001db4 <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004224:	e009      	b.n	800423a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004226:	f7fd fdc5 	bl	8001db4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d902      	bls.n	800423a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	73fb      	strb	r3, [r7, #15]
          break;
 8004238:	e005      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ef      	beq.n	8004226 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e049      	b.n	800430e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd fbd0 	bl	8001a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fa9a 	bl	80047e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d001      	beq.n	8004330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e03b      	b.n	80043a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_TIM_Base_Start_IT+0x4e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d004      	beq.n	8004366 <HAL_TIM_Base_Start_IT+0x4e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d115      	bne.n	8004392 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <HAL_TIM_Base_Start_IT+0xa4>)
 800436e:	4013      	ands	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b06      	cmp	r3, #6
 8004376:	d015      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x8c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d011      	beq.n	80043a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	e008      	b.n	80043a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e000      	b.n	80043a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	40014000 	.word	0x40014000
 80043bc:	00010007 	.word	0x00010007

080043c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d122      	bne.n	800441c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d11b      	bne.n	800441c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0202 	mvn.w	r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f9ce 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9c0 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f9d1 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d122      	bne.n	8004470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0204 	mvn.w	r2, #4
 8004440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9a4 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 800445c:	e005      	b.n	800446a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f996 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f9a7 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d122      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d11b      	bne.n	80044c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0208 	mvn.w	r2, #8
 8004494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2204      	movs	r2, #4
 800449a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f97a 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 80044b0:	e005      	b.n	80044be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f96c 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f97d 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d122      	bne.n	8004518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f06f 0210 	mvn.w	r2, #16
 80044e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2208      	movs	r2, #8
 80044ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f950 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004504:	e005      	b.n	8004512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f942 	bl	8004790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f953 	bl	80047b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10e      	bne.n	8004544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b01      	cmp	r3, #1
 8004532:	d107      	bne.n	8004544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0201 	mvn.w	r2, #1
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fd16 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454e:	2b80      	cmp	r3, #128	; 0x80
 8004550:	d10e      	bne.n	8004570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d107      	bne.n	8004570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 faa6 	bl	8004abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d10e      	bne.n	800459e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d107      	bne.n	800459e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fa99 	bl	8004ad0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d10e      	bne.n	80045ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d107      	bne.n	80045ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f901 	bl	80047cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d10e      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d107      	bne.n	80045f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f06f 0220 	mvn.w	r2, #32
 80045ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa59 	bl	8004aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b084      	sub	sp, #16
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
 8004606:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_TIM_ConfigClockSource+0x1c>
 8004616:	2302      	movs	r3, #2
 8004618:	e0b6      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x18a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004638:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800463c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004644:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	d03e      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xd8>
 8004658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465c:	f200 8087 	bhi.w	800476e <HAL_TIM_ConfigClockSource+0x170>
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	f000 8086 	beq.w	8004774 <HAL_TIM_ConfigClockSource+0x176>
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d87f      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 800466e:	2b70      	cmp	r3, #112	; 0x70
 8004670:	d01a      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0xaa>
 8004672:	2b70      	cmp	r3, #112	; 0x70
 8004674:	d87b      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 8004676:	2b60      	cmp	r3, #96	; 0x60
 8004678:	d050      	beq.n	800471c <HAL_TIM_ConfigClockSource+0x11e>
 800467a:	2b60      	cmp	r3, #96	; 0x60
 800467c:	d877      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 800467e:	2b50      	cmp	r3, #80	; 0x50
 8004680:	d03c      	beq.n	80046fc <HAL_TIM_ConfigClockSource+0xfe>
 8004682:	2b50      	cmp	r3, #80	; 0x50
 8004684:	d873      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d058      	beq.n	800473c <HAL_TIM_ConfigClockSource+0x13e>
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d86f      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 800468e:	2b30      	cmp	r3, #48	; 0x30
 8004690:	d064      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x15e>
 8004692:	2b30      	cmp	r3, #48	; 0x30
 8004694:	d86b      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 8004696:	2b20      	cmp	r3, #32
 8004698:	d060      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x15e>
 800469a:	2b20      	cmp	r3, #32
 800469c:	d867      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x170>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d05c      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x15e>
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d05a      	beq.n	800475c <HAL_TIM_ConfigClockSource+0x15e>
 80046a6:	e062      	b.n	800476e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f000 f970 	bl	800499c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e04f      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f000 f959 	bl	800499c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f8:	609a      	str	r2, [r3, #8]
      break;
 80046fa:	e03c      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	461a      	mov	r2, r3
 800470a:	f000 f8cd 	bl	80048a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2150      	movs	r1, #80	; 0x50
 8004714:	4618      	mov	r0, r3
 8004716:	f000 f926 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800471a:	e02c      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	461a      	mov	r2, r3
 800472a:	f000 f8ec 	bl	8004906 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2160      	movs	r1, #96	; 0x60
 8004734:	4618      	mov	r0, r3
 8004736:	f000 f916 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800473a:	e01c      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	461a      	mov	r2, r3
 800474a:	f000 f8ad 	bl	80048a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2140      	movs	r1, #64	; 0x40
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f906 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800475a:	e00c      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 f8fd 	bl	8004966 <TIM_ITRx_SetConfig>
      break;
 800476c:	e003      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
      break;
 8004772:	e000      	b.n	8004776 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004774:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a2a      	ldr	r2, [pc, #168]	; (800489c <TIM_Base_SetConfig+0xbc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d003      	beq.n	8004800 <TIM_Base_SetConfig+0x20>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fe:	d108      	bne.n	8004812 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_Base_SetConfig+0xbc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00b      	beq.n	8004832 <TIM_Base_SetConfig+0x52>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004820:	d007      	beq.n	8004832 <TIM_Base_SetConfig+0x52>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <TIM_Base_SetConfig+0xc0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_Base_SetConfig+0x52>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <TIM_Base_SetConfig+0xc4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <TIM_Base_SetConfig+0xbc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_Base_SetConfig+0xa0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <TIM_Base_SetConfig+0xc0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0xa0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0a      	ldr	r2, [pc, #40]	; (80048a4 <TIM_Base_SetConfig+0xc4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	615a      	str	r2, [r3, #20]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400

080048a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 030a 	bic.w	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004906:	b480      	push	{r7}
 8004908:	b087      	sub	sp, #28
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0210 	bic.w	r2, r3, #16
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004930:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	031b      	lsls	r3, r3, #12
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004942:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4313      	orrs	r3, r2
 800494c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	f043 0307 	orr.w	r3, r3, #7
 8004988:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	431a      	orrs	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e04f      	b.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a14      	ldr	r2, [pc, #80]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10c      	bne.n	8004a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40014000 	.word	0x40014000

08004aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e040      	b.n	8004b78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd f818 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f8c0 	bl	8004ca8 <UART_SetConfig>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e022      	b.n	8004b78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fae0 	bl	8005100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb67 	bl	8005244 <UART_CheckIdleState>
 8004b76:	4603      	mov	r3, r0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	f040 8082 	bne.w	8004c9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d002      	beq.n	8004ba6 <HAL_UART_Transmit+0x26>
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e07a      	b.n	8004ca0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x38>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e073      	b.n	8004ca0 <HAL_UART_Transmit+0x120>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2221      	movs	r2, #33	; 0x21
 8004bcc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bce:	f7fd f8f1 	bl	8001db4 <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d108      	bne.n	8004c00 <HAL_UART_Transmit+0x80>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e003      	b.n	8004c08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c10:	e02d      	b.n	8004c6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2180      	movs	r1, #128	; 0x80
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fb5a 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e039      	b.n	8004ca0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	3302      	adds	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	e008      	b.n	8004c5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	781a      	ldrb	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b292      	uxth	r2, r2
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1cb      	bne.n	8004c12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2140      	movs	r1, #64	; 0x40
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fb26 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e005      	b.n	8004ca0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2220      	movs	r2, #32
 8004c98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cac:	b08a      	sub	sp, #40	; 0x28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4bb4      	ldr	r3, [pc, #720]	; (8004fa8 <UART_SetConfig+0x300>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4aa9      	ldr	r2, [pc, #676]	; (8004fac <UART_SetConfig+0x304>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d10:	4313      	orrs	r3, r2
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	430a      	orrs	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4aa0      	ldr	r2, [pc, #640]	; (8004fb0 <UART_SetConfig+0x308>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d126      	bne.n	8004d80 <UART_SetConfig+0xd8>
 8004d32:	4ba0      	ldr	r3, [pc, #640]	; (8004fb4 <UART_SetConfig+0x30c>)
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d81b      	bhi.n	8004d78 <UART_SetConfig+0xd0>
 8004d40:	a201      	add	r2, pc, #4	; (adr r2, 8004d48 <UART_SetConfig+0xa0>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d69 	.word	0x08004d69
 8004d50:	08004d61 	.word	0x08004d61
 8004d54:	08004d71 	.word	0x08004d71
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5e:	e080      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d66:	e07c      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6e:	e078      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d76:	e074      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d7e:	e070      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a8c      	ldr	r2, [pc, #560]	; (8004fb8 <UART_SetConfig+0x310>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d138      	bne.n	8004dfc <UART_SetConfig+0x154>
 8004d8a:	4b8a      	ldr	r3, [pc, #552]	; (8004fb4 <UART_SetConfig+0x30c>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f003 030c 	and.w	r3, r3, #12
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d82d      	bhi.n	8004df4 <UART_SetConfig+0x14c>
 8004d98:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <UART_SetConfig+0xf8>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004df5 	.word	0x08004df5
 8004dac:	08004df5 	.word	0x08004df5
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004df5 	.word	0x08004df5
 8004db8:	08004df5 	.word	0x08004df5
 8004dbc:	08004df5 	.word	0x08004df5
 8004dc0:	08004ddd 	.word	0x08004ddd
 8004dc4:	08004df5 	.word	0x08004df5
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004df5 	.word	0x08004df5
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dda:	e042      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004de2:	e03e      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004de4:	2304      	movs	r3, #4
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dea:	e03a      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004dec:	2308      	movs	r3, #8
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df2:	e036      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004df4:	2310      	movs	r3, #16
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfa:	e032      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a6a      	ldr	r2, [pc, #424]	; (8004fac <UART_SetConfig+0x304>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d12a      	bne.n	8004e5c <UART_SetConfig+0x1b4>
 8004e06:	4b6b      	ldr	r3, [pc, #428]	; (8004fb4 <UART_SetConfig+0x30c>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e14:	d01a      	beq.n	8004e4c <UART_SetConfig+0x1a4>
 8004e16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e1a:	d81b      	bhi.n	8004e54 <UART_SetConfig+0x1ac>
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d00c      	beq.n	8004e3c <UART_SetConfig+0x194>
 8004e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e26:	d815      	bhi.n	8004e54 <UART_SetConfig+0x1ac>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <UART_SetConfig+0x18c>
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d008      	beq.n	8004e44 <UART_SetConfig+0x19c>
 8004e32:	e00f      	b.n	8004e54 <UART_SetConfig+0x1ac>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e3a:	e012      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e42:	e00e      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e44:	2304      	movs	r3, #4
 8004e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e4a:	e00a      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e52:	e006      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e54:	2310      	movs	r3, #16
 8004e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5a:	e002      	b.n	8004e62 <UART_SetConfig+0x1ba>
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a51      	ldr	r2, [pc, #324]	; (8004fac <UART_SetConfig+0x304>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d17a      	bne.n	8004f62 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d824      	bhi.n	8004ebe <UART_SetConfig+0x216>
 8004e74:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <UART_SetConfig+0x1d4>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004eaf 	.word	0x08004eaf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004ebf 	.word	0x08004ebf
 8004e98:	08004ebf 	.word	0x08004ebf
 8004e9c:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe fe5e 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	61f8      	str	r0, [r7, #28]
        break;
 8004ea6:	e010      	b.n	8004eca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b44      	ldr	r3, [pc, #272]	; (8004fbc <UART_SetConfig+0x314>)
 8004eaa:	61fb      	str	r3, [r7, #28]
        break;
 8004eac:	e00d      	b.n	8004eca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7fe fdbf 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004eb2:	61f8      	str	r0, [r7, #28]
        break;
 8004eb4:	e009      	b.n	8004eca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	61fb      	str	r3, [r7, #28]
        break;
 8004ebc:	e005      	b.n	8004eca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8107 	beq.w	80050e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d305      	bcc.n	8004eee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d903      	bls.n	8004ef6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ef4:	e0f4      	b.n	80050e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	461c      	mov	r4, r3
 8004efc:	4615      	mov	r5, r2
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	022b      	lsls	r3, r5, #8
 8004f08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f0c:	0222      	lsls	r2, r4, #8
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	6849      	ldr	r1, [r1, #4]
 8004f12:	0849      	lsrs	r1, r1, #1
 8004f14:	2000      	movs	r0, #0
 8004f16:	4688      	mov	r8, r1
 8004f18:	4681      	mov	r9, r0
 8004f1a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f1e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	603b      	str	r3, [r7, #0]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f30:	4650      	mov	r0, sl
 8004f32:	4659      	mov	r1, fp
 8004f34:	f7fb fdb8 	bl	8000aa8 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d308      	bcc.n	8004f5a <UART_SetConfig+0x2b2>
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d204      	bcs.n	8004f5a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	e0c2      	b.n	80050e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f60:	e0be      	b.n	80050e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6a:	d16a      	bne.n	8005042 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d834      	bhi.n	8004fde <UART_SetConfig+0x336>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <UART_SetConfig+0x2d4>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fc1 	.word	0x08004fc1
 8004f84:	08004fc9 	.word	0x08004fc9
 8004f88:	08004fdf 	.word	0x08004fdf
 8004f8c:	08004fcf 	.word	0x08004fcf
 8004f90:	08004fdf 	.word	0x08004fdf
 8004f94:	08004fdf 	.word	0x08004fdf
 8004f98:	08004fdf 	.word	0x08004fdf
 8004f9c:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe fdde 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	61f8      	str	r0, [r7, #28]
        break;
 8004fa6:	e020      	b.n	8004fea <UART_SetConfig+0x342>
 8004fa8:	efff69f3 	.word	0xefff69f3
 8004fac:	40008000 	.word	0x40008000
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fc0:	f7fe fde4 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <UART_SetConfig+0x454>)
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fe fd2f 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 8004fd2:	61f8      	str	r0, [r7, #28]
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d077      	beq.n	80050e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	005a      	lsls	r2, r3, #1
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b0f      	cmp	r3, #15
 800500a:	d916      	bls.n	800503a <UART_SetConfig+0x392>
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005012:	d212      	bcs.n	800503a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	b29b      	uxth	r3, r3
 8005018:	f023 030f 	bic.w	r3, r3, #15
 800501c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	b29a      	uxth	r2, r3
 800502a:	8afb      	ldrh	r3, [r7, #22]
 800502c:	4313      	orrs	r3, r2
 800502e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	8afa      	ldrh	r2, [r7, #22]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e052      	b.n	80050e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005040:	e04e      	b.n	80050e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005046:	2b08      	cmp	r3, #8
 8005048:	d827      	bhi.n	800509a <UART_SetConfig+0x3f2>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x3a8>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005075 	.word	0x08005075
 8005054:	0800507d 	.word	0x0800507d
 8005058:	08005085 	.word	0x08005085
 800505c:	0800509b 	.word	0x0800509b
 8005060:	0800508b 	.word	0x0800508b
 8005064:	0800509b 	.word	0x0800509b
 8005068:	0800509b 	.word	0x0800509b
 800506c:	0800509b 	.word	0x0800509b
 8005070:	08005093 	.word	0x08005093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005074:	f7fe fd74 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8005078:	61f8      	str	r0, [r7, #28]
        break;
 800507a:	e014      	b.n	80050a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800507c:	f7fe fd86 	bl	8003b8c <HAL_RCC_GetPCLK2Freq>
 8005080:	61f8      	str	r0, [r7, #28]
        break;
 8005082:	e010      	b.n	80050a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <UART_SetConfig+0x454>)
 8005086:	61fb      	str	r3, [r7, #28]
        break;
 8005088:	e00d      	b.n	80050a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fe fcd1 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 800508e:	61f8      	str	r0, [r7, #28]
        break;
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005096:	61fb      	str	r3, [r7, #28]
        break;
 8005098:	e005      	b.n	80050a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050a4:	bf00      	nop
    }

    if (pclk != 0U)
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d019      	beq.n	80050e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	085a      	lsrs	r2, r3, #1
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	441a      	add	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b0f      	cmp	r3, #15
 80050c4:	d909      	bls.n	80050da <UART_SetConfig+0x432>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d205      	bcs.n	80050da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60da      	str	r2, [r3, #12]
 80050d8:	e002      	b.n	80050e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050fa:	bf00      	nop
 80050fc:	00f42400 	.word	0x00f42400

08005100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fe:	d10a      	bne.n	8005216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005254:	f7fc fdae 	bl	8001db4 <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b08      	cmp	r3, #8
 8005266:	d10e      	bne.n	8005286 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005268:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f82d 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e023      	b.n	80052ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d10e      	bne.n	80052b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f817 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e00d      	b.n	80052ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b09c      	sub	sp, #112	; 0x70
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e6:	e0a5      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	f000 80a1 	beq.w	8005434 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fc fd5f 	bl	8001db4 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <UART_WaitOnFlagUntilTimeout+0x32>
 8005302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005304:	2b00      	cmp	r3, #0
 8005306:	d13e      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005318:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800531c:	667b      	str	r3, [r7, #100]	; 0x64
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005328:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800532c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e6      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	663b      	str	r3, [r7, #96]	; 0x60
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3308      	adds	r3, #8
 8005358:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800535a:	64ba      	str	r2, [r7, #72]	; 0x48
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e067      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d04f      	beq.n	8005434 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a2:	d147      	bne.n	8005434 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
 80053ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	613b      	str	r3, [r7, #16]
   return(result);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005400:	623a      	str	r2, [r7, #32]
 8005402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69f9      	ldr	r1, [r7, #28]
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	61bb      	str	r3, [r7, #24]
   return(result);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e010      	b.n	8005456 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4013      	ands	r3, r2
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	429a      	cmp	r2, r3
 8005450:	f43f af4a 	beq.w	80052e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3770      	adds	r7, #112	; 0x70
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	2000009c 	.word	0x2000009c

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	4d0d      	ldr	r5, [pc, #52]	; (80054a4 <__libc_init_array+0x38>)
 8005470:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005472:	1b64      	subs	r4, r4, r5
 8005474:	10a4      	asrs	r4, r4, #2
 8005476:	2600      	movs	r6, #0
 8005478:	42a6      	cmp	r6, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	4d0b      	ldr	r5, [pc, #44]	; (80054ac <__libc_init_array+0x40>)
 800547e:	4c0c      	ldr	r4, [pc, #48]	; (80054b0 <__libc_init_array+0x44>)
 8005480:	f000 fb82 	bl	8005b88 <_init>
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	2600      	movs	r6, #0
 800548a:	42a6      	cmp	r6, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f855 3b04 	ldr.w	r3, [r5], #4
 8005494:	4798      	blx	r3
 8005496:	3601      	adds	r6, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f855 3b04 	ldr.w	r3, [r5], #4
 800549e:	4798      	blx	r3
 80054a0:	3601      	adds	r6, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08005c60 	.word	0x08005c60
 80054a8:	08005c60 	.word	0x08005c60
 80054ac:	08005c60 	.word	0x08005c60
 80054b0:	08005c64 	.word	0x08005c64

080054b4 <memcpy>:
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80054bc:	d100      	bne.n	80054c0 <memcpy+0xc>
 80054be:	4770      	bx	lr
 80054c0:	b510      	push	{r4, lr}
 80054c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d1f9      	bne.n	80054c2 <memcpy+0xe>
 80054ce:	bd10      	pop	{r4, pc}

080054d0 <memset>:
 80054d0:	4402      	add	r2, r0
 80054d2:	4603      	mov	r3, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d100      	bne.n	80054da <memset+0xa>
 80054d8:	4770      	bx	lr
 80054da:	f803 1b01 	strb.w	r1, [r3], #1
 80054de:	e7f9      	b.n	80054d4 <memset+0x4>

080054e0 <atan>:
 80054e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec55 4b10 	vmov	r4, r5, d0
 80054e8:	4bc3      	ldr	r3, [pc, #780]	; (80057f8 <atan+0x318>)
 80054ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054ee:	429e      	cmp	r6, r3
 80054f0:	46ab      	mov	fp, r5
 80054f2:	dd18      	ble.n	8005526 <atan+0x46>
 80054f4:	4bc1      	ldr	r3, [pc, #772]	; (80057fc <atan+0x31c>)
 80054f6:	429e      	cmp	r6, r3
 80054f8:	dc01      	bgt.n	80054fe <atan+0x1e>
 80054fa:	d109      	bne.n	8005510 <atan+0x30>
 80054fc:	b144      	cbz	r4, 8005510 <atan+0x30>
 80054fe:	4622      	mov	r2, r4
 8005500:	462b      	mov	r3, r5
 8005502:	4620      	mov	r0, r4
 8005504:	4629      	mov	r1, r5
 8005506:	f7fa fe69 	bl	80001dc <__adddf3>
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	e006      	b.n	800551e <atan+0x3e>
 8005510:	f1bb 0f00 	cmp.w	fp, #0
 8005514:	f300 8131 	bgt.w	800577a <atan+0x29a>
 8005518:	a59b      	add	r5, pc, #620	; (adr r5, 8005788 <atan+0x2a8>)
 800551a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800551e:	ec45 4b10 	vmov	d0, r4, r5
 8005522:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	4bb6      	ldr	r3, [pc, #728]	; (8005800 <atan+0x320>)
 8005528:	429e      	cmp	r6, r3
 800552a:	dc14      	bgt.n	8005556 <atan+0x76>
 800552c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005530:	429e      	cmp	r6, r3
 8005532:	dc0d      	bgt.n	8005550 <atan+0x70>
 8005534:	a396      	add	r3, pc, #600	; (adr r3, 8005790 <atan+0x2b0>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	ee10 0a10 	vmov	r0, s0
 800553e:	4629      	mov	r1, r5
 8005540:	f7fa fe4c 	bl	80001dc <__adddf3>
 8005544:	4baf      	ldr	r3, [pc, #700]	; (8005804 <atan+0x324>)
 8005546:	2200      	movs	r2, #0
 8005548:	f7fb fa8e 	bl	8000a68 <__aeabi_dcmpgt>
 800554c:	2800      	cmp	r0, #0
 800554e:	d1e6      	bne.n	800551e <atan+0x3e>
 8005550:	f04f 3aff 	mov.w	sl, #4294967295
 8005554:	e02b      	b.n	80055ae <atan+0xce>
 8005556:	f000 f963 	bl	8005820 <fabs>
 800555a:	4bab      	ldr	r3, [pc, #684]	; (8005808 <atan+0x328>)
 800555c:	429e      	cmp	r6, r3
 800555e:	ec55 4b10 	vmov	r4, r5, d0
 8005562:	f300 80bf 	bgt.w	80056e4 <atan+0x204>
 8005566:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800556a:	429e      	cmp	r6, r3
 800556c:	f300 80a0 	bgt.w	80056b0 <atan+0x1d0>
 8005570:	ee10 2a10 	vmov	r2, s0
 8005574:	ee10 0a10 	vmov	r0, s0
 8005578:	462b      	mov	r3, r5
 800557a:	4629      	mov	r1, r5
 800557c:	f7fa fe2e 	bl	80001dc <__adddf3>
 8005580:	4ba0      	ldr	r3, [pc, #640]	; (8005804 <atan+0x324>)
 8005582:	2200      	movs	r2, #0
 8005584:	f7fa fe28 	bl	80001d8 <__aeabi_dsub>
 8005588:	2200      	movs	r2, #0
 800558a:	4606      	mov	r6, r0
 800558c:	460f      	mov	r7, r1
 800558e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	f7fa fe21 	bl	80001dc <__adddf3>
 800559a:	4602      	mov	r2, r0
 800559c:	460b      	mov	r3, r1
 800559e:	4630      	mov	r0, r6
 80055a0:	4639      	mov	r1, r7
 80055a2:	f7fb f8fb 	bl	800079c <__aeabi_ddiv>
 80055a6:	f04f 0a00 	mov.w	sl, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	460d      	mov	r5, r1
 80055ae:	4622      	mov	r2, r4
 80055b0:	462b      	mov	r3, r5
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa ffc7 	bl	8000548 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4680      	mov	r8, r0
 80055c0:	4689      	mov	r9, r1
 80055c2:	f7fa ffc1 	bl	8000548 <__aeabi_dmul>
 80055c6:	a374      	add	r3, pc, #464	; (adr r3, 8005798 <atan+0x2b8>)
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	f7fa ffba 	bl	8000548 <__aeabi_dmul>
 80055d4:	a372      	add	r3, pc, #456	; (adr r3, 80057a0 <atan+0x2c0>)
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f7fa fdff 	bl	80001dc <__adddf3>
 80055de:	4632      	mov	r2, r6
 80055e0:	463b      	mov	r3, r7
 80055e2:	f7fa ffb1 	bl	8000548 <__aeabi_dmul>
 80055e6:	a370      	add	r3, pc, #448	; (adr r3, 80057a8 <atan+0x2c8>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f7fa fdf6 	bl	80001dc <__adddf3>
 80055f0:	4632      	mov	r2, r6
 80055f2:	463b      	mov	r3, r7
 80055f4:	f7fa ffa8 	bl	8000548 <__aeabi_dmul>
 80055f8:	a36d      	add	r3, pc, #436	; (adr r3, 80057b0 <atan+0x2d0>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	f7fa fded 	bl	80001dc <__adddf3>
 8005602:	4632      	mov	r2, r6
 8005604:	463b      	mov	r3, r7
 8005606:	f7fa ff9f 	bl	8000548 <__aeabi_dmul>
 800560a:	a36b      	add	r3, pc, #428	; (adr r3, 80057b8 <atan+0x2d8>)
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f7fa fde4 	bl	80001dc <__adddf3>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	f7fa ff96 	bl	8000548 <__aeabi_dmul>
 800561c:	a368      	add	r3, pc, #416	; (adr r3, 80057c0 <atan+0x2e0>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f7fa fddb 	bl	80001dc <__adddf3>
 8005626:	4642      	mov	r2, r8
 8005628:	464b      	mov	r3, r9
 800562a:	f7fa ff8d 	bl	8000548 <__aeabi_dmul>
 800562e:	a366      	add	r3, pc, #408	; (adr r3, 80057c8 <atan+0x2e8>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa ff84 	bl	8000548 <__aeabi_dmul>
 8005640:	a363      	add	r3, pc, #396	; (adr r3, 80057d0 <atan+0x2f0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa fdc7 	bl	80001d8 <__aeabi_dsub>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	f7fa ff7b 	bl	8000548 <__aeabi_dmul>
 8005652:	a361      	add	r3, pc, #388	; (adr r3, 80057d8 <atan+0x2f8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fdbe 	bl	80001d8 <__aeabi_dsub>
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	f7fa ff72 	bl	8000548 <__aeabi_dmul>
 8005664:	a35e      	add	r3, pc, #376	; (adr r3, 80057e0 <atan+0x300>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fdb5 	bl	80001d8 <__aeabi_dsub>
 800566e:	4632      	mov	r2, r6
 8005670:	463b      	mov	r3, r7
 8005672:	f7fa ff69 	bl	8000548 <__aeabi_dmul>
 8005676:	a35c      	add	r3, pc, #368	; (adr r3, 80057e8 <atan+0x308>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa fdac 	bl	80001d8 <__aeabi_dsub>
 8005680:	4632      	mov	r2, r6
 8005682:	463b      	mov	r3, r7
 8005684:	f7fa ff60 	bl	8000548 <__aeabi_dmul>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4640      	mov	r0, r8
 800568e:	4649      	mov	r1, r9
 8005690:	f7fa fda4 	bl	80001dc <__adddf3>
 8005694:	4622      	mov	r2, r4
 8005696:	462b      	mov	r3, r5
 8005698:	f7fa ff56 	bl	8000548 <__aeabi_dmul>
 800569c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	d14b      	bne.n	800573e <atan+0x25e>
 80056a6:	4620      	mov	r0, r4
 80056a8:	4629      	mov	r1, r5
 80056aa:	f7fa fd95 	bl	80001d8 <__aeabi_dsub>
 80056ae:	e72c      	b.n	800550a <atan+0x2a>
 80056b0:	ee10 0a10 	vmov	r0, s0
 80056b4:	4b53      	ldr	r3, [pc, #332]	; (8005804 <atan+0x324>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7fa fd8d 	bl	80001d8 <__aeabi_dsub>
 80056be:	4b51      	ldr	r3, [pc, #324]	; (8005804 <atan+0x324>)
 80056c0:	4606      	mov	r6, r0
 80056c2:	460f      	mov	r7, r1
 80056c4:	2200      	movs	r2, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fa fd87 	bl	80001dc <__adddf3>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fb f861 	bl	800079c <__aeabi_ddiv>
 80056da:	f04f 0a01 	mov.w	sl, #1
 80056de:	4604      	mov	r4, r0
 80056e0:	460d      	mov	r5, r1
 80056e2:	e764      	b.n	80055ae <atan+0xce>
 80056e4:	4b49      	ldr	r3, [pc, #292]	; (800580c <atan+0x32c>)
 80056e6:	429e      	cmp	r6, r3
 80056e8:	da1d      	bge.n	8005726 <atan+0x246>
 80056ea:	ee10 0a10 	vmov	r0, s0
 80056ee:	4b48      	ldr	r3, [pc, #288]	; (8005810 <atan+0x330>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	4629      	mov	r1, r5
 80056f4:	f7fa fd70 	bl	80001d8 <__aeabi_dsub>
 80056f8:	4b45      	ldr	r3, [pc, #276]	; (8005810 <atan+0x330>)
 80056fa:	4606      	mov	r6, r0
 80056fc:	460f      	mov	r7, r1
 80056fe:	2200      	movs	r2, #0
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fa ff20 	bl	8000548 <__aeabi_dmul>
 8005708:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <atan+0x324>)
 800570a:	2200      	movs	r2, #0
 800570c:	f7fa fd66 	bl	80001dc <__adddf3>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4630      	mov	r0, r6
 8005716:	4639      	mov	r1, r7
 8005718:	f7fb f840 	bl	800079c <__aeabi_ddiv>
 800571c:	f04f 0a02 	mov.w	sl, #2
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	e743      	b.n	80055ae <atan+0xce>
 8005726:	462b      	mov	r3, r5
 8005728:	ee10 2a10 	vmov	r2, s0
 800572c:	4939      	ldr	r1, [pc, #228]	; (8005814 <atan+0x334>)
 800572e:	2000      	movs	r0, #0
 8005730:	f7fb f834 	bl	800079c <__aeabi_ddiv>
 8005734:	f04f 0a03 	mov.w	sl, #3
 8005738:	4604      	mov	r4, r0
 800573a:	460d      	mov	r5, r1
 800573c:	e737      	b.n	80055ae <atan+0xce>
 800573e:	4b36      	ldr	r3, [pc, #216]	; (8005818 <atan+0x338>)
 8005740:	4e36      	ldr	r6, [pc, #216]	; (800581c <atan+0x33c>)
 8005742:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005746:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800574a:	e9da 2300 	ldrd	r2, r3, [sl]
 800574e:	f7fa fd43 	bl	80001d8 <__aeabi_dsub>
 8005752:	4622      	mov	r2, r4
 8005754:	462b      	mov	r3, r5
 8005756:	f7fa fd3f 	bl	80001d8 <__aeabi_dsub>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005762:	f7fa fd39 	bl	80001d8 <__aeabi_dsub>
 8005766:	f1bb 0f00 	cmp.w	fp, #0
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	f6bf aed6 	bge.w	800551e <atan+0x3e>
 8005772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005776:	461d      	mov	r5, r3
 8005778:	e6d1      	b.n	800551e <atan+0x3e>
 800577a:	a51d      	add	r5, pc, #116	; (adr r5, 80057f0 <atan+0x310>)
 800577c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005780:	e6cd      	b.n	800551e <atan+0x3e>
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	54442d18 	.word	0x54442d18
 800578c:	bff921fb 	.word	0xbff921fb
 8005790:	8800759c 	.word	0x8800759c
 8005794:	7e37e43c 	.word	0x7e37e43c
 8005798:	e322da11 	.word	0xe322da11
 800579c:	3f90ad3a 	.word	0x3f90ad3a
 80057a0:	24760deb 	.word	0x24760deb
 80057a4:	3fa97b4b 	.word	0x3fa97b4b
 80057a8:	a0d03d51 	.word	0xa0d03d51
 80057ac:	3fb10d66 	.word	0x3fb10d66
 80057b0:	c54c206e 	.word	0xc54c206e
 80057b4:	3fb745cd 	.word	0x3fb745cd
 80057b8:	920083ff 	.word	0x920083ff
 80057bc:	3fc24924 	.word	0x3fc24924
 80057c0:	5555550d 	.word	0x5555550d
 80057c4:	3fd55555 	.word	0x3fd55555
 80057c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80057cc:	bfa2b444 	.word	0xbfa2b444
 80057d0:	52defd9a 	.word	0x52defd9a
 80057d4:	3fadde2d 	.word	0x3fadde2d
 80057d8:	af749a6d 	.word	0xaf749a6d
 80057dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80057e0:	fe231671 	.word	0xfe231671
 80057e4:	3fbc71c6 	.word	0x3fbc71c6
 80057e8:	9998ebc4 	.word	0x9998ebc4
 80057ec:	3fc99999 	.word	0x3fc99999
 80057f0:	54442d18 	.word	0x54442d18
 80057f4:	3ff921fb 	.word	0x3ff921fb
 80057f8:	440fffff 	.word	0x440fffff
 80057fc:	7ff00000 	.word	0x7ff00000
 8005800:	3fdbffff 	.word	0x3fdbffff
 8005804:	3ff00000 	.word	0x3ff00000
 8005808:	3ff2ffff 	.word	0x3ff2ffff
 800580c:	40038000 	.word	0x40038000
 8005810:	3ff80000 	.word	0x3ff80000
 8005814:	bff00000 	.word	0xbff00000
 8005818:	08005c08 	.word	0x08005c08
 800581c:	08005be8 	.word	0x08005be8

08005820 <fabs>:
 8005820:	ec51 0b10 	vmov	r0, r1, d0
 8005824:	ee10 2a10 	vmov	r2, s0
 8005828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800582c:	ec43 2b10 	vmov	d0, r2, r3
 8005830:	4770      	bx	lr

08005832 <atan2>:
 8005832:	f000 b82d 	b.w	8005890 <__ieee754_atan2>

08005836 <sqrt>:
 8005836:	b538      	push	{r3, r4, r5, lr}
 8005838:	ed2d 8b02 	vpush	{d8}
 800583c:	ec55 4b10 	vmov	r4, r5, d0
 8005840:	f000 f8f0 	bl	8005a24 <__ieee754_sqrt>
 8005844:	4622      	mov	r2, r4
 8005846:	462b      	mov	r3, r5
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	eeb0 8a40 	vmov.f32	s16, s0
 8005850:	eef0 8a60 	vmov.f32	s17, s1
 8005854:	f7fb f912 	bl	8000a7c <__aeabi_dcmpun>
 8005858:	b990      	cbnz	r0, 8005880 <sqrt+0x4a>
 800585a:	2200      	movs	r2, #0
 800585c:	2300      	movs	r3, #0
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fb f8e3 	bl	8000a2c <__aeabi_dcmplt>
 8005866:	b158      	cbz	r0, 8005880 <sqrt+0x4a>
 8005868:	f7ff fdfa 	bl	8005460 <__errno>
 800586c:	2321      	movs	r3, #33	; 0x21
 800586e:	6003      	str	r3, [r0, #0]
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f7fa ff90 	bl	800079c <__aeabi_ddiv>
 800587c:	ec41 0b18 	vmov	d8, r0, r1
 8005880:	eeb0 0a48 	vmov.f32	s0, s16
 8005884:	eef0 0a68 	vmov.f32	s1, s17
 8005888:	ecbd 8b02 	vpop	{d8}
 800588c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005890 <__ieee754_atan2>:
 8005890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005894:	ec57 6b11 	vmov	r6, r7, d1
 8005898:	4273      	negs	r3, r6
 800589a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8005a20 <__ieee754_atan2+0x190>
 800589e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80058a2:	4333      	orrs	r3, r6
 80058a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80058a8:	4573      	cmp	r3, lr
 80058aa:	ec51 0b10 	vmov	r0, r1, d0
 80058ae:	ee11 8a10 	vmov	r8, s2
 80058b2:	d80a      	bhi.n	80058ca <__ieee754_atan2+0x3a>
 80058b4:	4244      	negs	r4, r0
 80058b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058ba:	4304      	orrs	r4, r0
 80058bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80058c0:	4574      	cmp	r4, lr
 80058c2:	ee10 9a10 	vmov	r9, s0
 80058c6:	468c      	mov	ip, r1
 80058c8:	d907      	bls.n	80058da <__ieee754_atan2+0x4a>
 80058ca:	4632      	mov	r2, r6
 80058cc:	463b      	mov	r3, r7
 80058ce:	f7fa fc85 	bl	80001dc <__adddf3>
 80058d2:	ec41 0b10 	vmov	d0, r0, r1
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80058de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80058e2:	4334      	orrs	r4, r6
 80058e4:	d103      	bne.n	80058ee <__ieee754_atan2+0x5e>
 80058e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ea:	f7ff bdf9 	b.w	80054e0 <atan>
 80058ee:	17bc      	asrs	r4, r7, #30
 80058f0:	f004 0402 	and.w	r4, r4, #2
 80058f4:	ea53 0909 	orrs.w	r9, r3, r9
 80058f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80058fc:	d107      	bne.n	800590e <__ieee754_atan2+0x7e>
 80058fe:	2c02      	cmp	r4, #2
 8005900:	d060      	beq.n	80059c4 <__ieee754_atan2+0x134>
 8005902:	2c03      	cmp	r4, #3
 8005904:	d1e5      	bne.n	80058d2 <__ieee754_atan2+0x42>
 8005906:	a142      	add	r1, pc, #264	; (adr r1, 8005a10 <__ieee754_atan2+0x180>)
 8005908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590c:	e7e1      	b.n	80058d2 <__ieee754_atan2+0x42>
 800590e:	ea52 0808 	orrs.w	r8, r2, r8
 8005912:	d106      	bne.n	8005922 <__ieee754_atan2+0x92>
 8005914:	f1bc 0f00 	cmp.w	ip, #0
 8005918:	da5f      	bge.n	80059da <__ieee754_atan2+0x14a>
 800591a:	a13f      	add	r1, pc, #252	; (adr r1, 8005a18 <__ieee754_atan2+0x188>)
 800591c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005920:	e7d7      	b.n	80058d2 <__ieee754_atan2+0x42>
 8005922:	4572      	cmp	r2, lr
 8005924:	d10f      	bne.n	8005946 <__ieee754_atan2+0xb6>
 8005926:	4293      	cmp	r3, r2
 8005928:	f104 34ff 	add.w	r4, r4, #4294967295
 800592c:	d107      	bne.n	800593e <__ieee754_atan2+0xae>
 800592e:	2c02      	cmp	r4, #2
 8005930:	d84c      	bhi.n	80059cc <__ieee754_atan2+0x13c>
 8005932:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <__ieee754_atan2+0x178>)
 8005934:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005938:	e9d4 0100 	ldrd	r0, r1, [r4]
 800593c:	e7c9      	b.n	80058d2 <__ieee754_atan2+0x42>
 800593e:	2c02      	cmp	r4, #2
 8005940:	d848      	bhi.n	80059d4 <__ieee754_atan2+0x144>
 8005942:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <__ieee754_atan2+0x17c>)
 8005944:	e7f6      	b.n	8005934 <__ieee754_atan2+0xa4>
 8005946:	4573      	cmp	r3, lr
 8005948:	d0e4      	beq.n	8005914 <__ieee754_atan2+0x84>
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005950:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005954:	da1e      	bge.n	8005994 <__ieee754_atan2+0x104>
 8005956:	2f00      	cmp	r7, #0
 8005958:	da01      	bge.n	800595e <__ieee754_atan2+0xce>
 800595a:	323c      	adds	r2, #60	; 0x3c
 800595c:	db1e      	blt.n	800599c <__ieee754_atan2+0x10c>
 800595e:	4632      	mov	r2, r6
 8005960:	463b      	mov	r3, r7
 8005962:	f7fa ff1b 	bl	800079c <__aeabi_ddiv>
 8005966:	ec41 0b10 	vmov	d0, r0, r1
 800596a:	f7ff ff59 	bl	8005820 <fabs>
 800596e:	f7ff fdb7 	bl	80054e0 <atan>
 8005972:	ec51 0b10 	vmov	r0, r1, d0
 8005976:	2c01      	cmp	r4, #1
 8005978:	d013      	beq.n	80059a2 <__ieee754_atan2+0x112>
 800597a:	2c02      	cmp	r4, #2
 800597c:	d015      	beq.n	80059aa <__ieee754_atan2+0x11a>
 800597e:	2c00      	cmp	r4, #0
 8005980:	d0a7      	beq.n	80058d2 <__ieee754_atan2+0x42>
 8005982:	a319      	add	r3, pc, #100	; (adr r3, 80059e8 <__ieee754_atan2+0x158>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fc26 	bl	80001d8 <__aeabi_dsub>
 800598c:	a318      	add	r3, pc, #96	; (adr r3, 80059f0 <__ieee754_atan2+0x160>)
 800598e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005992:	e014      	b.n	80059be <__ieee754_atan2+0x12e>
 8005994:	a118      	add	r1, pc, #96	; (adr r1, 80059f8 <__ieee754_atan2+0x168>)
 8005996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800599a:	e7ec      	b.n	8005976 <__ieee754_atan2+0xe6>
 800599c:	2000      	movs	r0, #0
 800599e:	2100      	movs	r1, #0
 80059a0:	e7e9      	b.n	8005976 <__ieee754_atan2+0xe6>
 80059a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059a6:	4619      	mov	r1, r3
 80059a8:	e793      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059aa:	a30f      	add	r3, pc, #60	; (adr r3, 80059e8 <__ieee754_atan2+0x158>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc12 	bl	80001d8 <__aeabi_dsub>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	a10d      	add	r1, pc, #52	; (adr r1, 80059f0 <__ieee754_atan2+0x160>)
 80059ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059be:	f7fa fc0b 	bl	80001d8 <__aeabi_dsub>
 80059c2:	e786      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059c4:	a10a      	add	r1, pc, #40	; (adr r1, 80059f0 <__ieee754_atan2+0x160>)
 80059c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ca:	e782      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059cc:	a10c      	add	r1, pc, #48	; (adr r1, 8005a00 <__ieee754_atan2+0x170>)
 80059ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059d2:	e77e      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059d4:	2000      	movs	r0, #0
 80059d6:	2100      	movs	r1, #0
 80059d8:	e77b      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059da:	a107      	add	r1, pc, #28	; (adr r1, 80059f8 <__ieee754_atan2+0x168>)
 80059dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059e0:	e777      	b.n	80058d2 <__ieee754_atan2+0x42>
 80059e2:	bf00      	nop
 80059e4:	f3af 8000 	nop.w
 80059e8:	33145c07 	.word	0x33145c07
 80059ec:	3ca1a626 	.word	0x3ca1a626
 80059f0:	54442d18 	.word	0x54442d18
 80059f4:	400921fb 	.word	0x400921fb
 80059f8:	54442d18 	.word	0x54442d18
 80059fc:	3ff921fb 	.word	0x3ff921fb
 8005a00:	54442d18 	.word	0x54442d18
 8005a04:	3fe921fb 	.word	0x3fe921fb
 8005a08:	08005c28 	.word	0x08005c28
 8005a0c:	08005c40 	.word	0x08005c40
 8005a10:	54442d18 	.word	0x54442d18
 8005a14:	c00921fb 	.word	0xc00921fb
 8005a18:	54442d18 	.word	0x54442d18
 8005a1c:	bff921fb 	.word	0xbff921fb
 8005a20:	7ff00000 	.word	0x7ff00000

08005a24 <__ieee754_sqrt>:
 8005a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a28:	ec55 4b10 	vmov	r4, r5, d0
 8005a2c:	4e55      	ldr	r6, [pc, #340]	; (8005b84 <__ieee754_sqrt+0x160>)
 8005a2e:	43ae      	bics	r6, r5
 8005a30:	ee10 0a10 	vmov	r0, s0
 8005a34:	ee10 3a10 	vmov	r3, s0
 8005a38:	462a      	mov	r2, r5
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	d110      	bne.n	8005a60 <__ieee754_sqrt+0x3c>
 8005a3e:	ee10 2a10 	vmov	r2, s0
 8005a42:	462b      	mov	r3, r5
 8005a44:	f7fa fd80 	bl	8000548 <__aeabi_dmul>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fbc4 	bl	80001dc <__adddf3>
 8005a54:	4604      	mov	r4, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	ec45 4b10 	vmov	d0, r4, r5
 8005a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a60:	2d00      	cmp	r5, #0
 8005a62:	dc10      	bgt.n	8005a86 <__ieee754_sqrt+0x62>
 8005a64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a68:	4330      	orrs	r0, r6
 8005a6a:	d0f5      	beq.n	8005a58 <__ieee754_sqrt+0x34>
 8005a6c:	b15d      	cbz	r5, 8005a86 <__ieee754_sqrt+0x62>
 8005a6e:	ee10 2a10 	vmov	r2, s0
 8005a72:	462b      	mov	r3, r5
 8005a74:	ee10 0a10 	vmov	r0, s0
 8005a78:	f7fa fbae 	bl	80001d8 <__aeabi_dsub>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	f7fa fe8c 	bl	800079c <__aeabi_ddiv>
 8005a84:	e7e6      	b.n	8005a54 <__ieee754_sqrt+0x30>
 8005a86:	1512      	asrs	r2, r2, #20
 8005a88:	d074      	beq.n	8005b74 <__ieee754_sqrt+0x150>
 8005a8a:	07d4      	lsls	r4, r2, #31
 8005a8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005a90:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005a98:	bf5e      	ittt	pl
 8005a9a:	0fda      	lsrpl	r2, r3, #31
 8005a9c:	005b      	lslpl	r3, r3, #1
 8005a9e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005aa2:	2400      	movs	r4, #0
 8005aa4:	0fda      	lsrs	r2, r3, #31
 8005aa6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005aaa:	107f      	asrs	r7, r7, #1
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2516      	movs	r5, #22
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005ab6:	1886      	adds	r6, r0, r2
 8005ab8:	428e      	cmp	r6, r1
 8005aba:	bfde      	ittt	le
 8005abc:	1b89      	suble	r1, r1, r6
 8005abe:	18b0      	addle	r0, r6, r2
 8005ac0:	18a4      	addle	r4, r4, r2
 8005ac2:	0049      	lsls	r1, r1, #1
 8005ac4:	3d01      	subs	r5, #1
 8005ac6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005aca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005ace:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ad2:	d1f0      	bne.n	8005ab6 <__ieee754_sqrt+0x92>
 8005ad4:	462a      	mov	r2, r5
 8005ad6:	f04f 0e20 	mov.w	lr, #32
 8005ada:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005ade:	4281      	cmp	r1, r0
 8005ae0:	eb06 0c05 	add.w	ip, r6, r5
 8005ae4:	dc02      	bgt.n	8005aec <__ieee754_sqrt+0xc8>
 8005ae6:	d113      	bne.n	8005b10 <__ieee754_sqrt+0xec>
 8005ae8:	459c      	cmp	ip, r3
 8005aea:	d811      	bhi.n	8005b10 <__ieee754_sqrt+0xec>
 8005aec:	f1bc 0f00 	cmp.w	ip, #0
 8005af0:	eb0c 0506 	add.w	r5, ip, r6
 8005af4:	da43      	bge.n	8005b7e <__ieee754_sqrt+0x15a>
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	db41      	blt.n	8005b7e <__ieee754_sqrt+0x15a>
 8005afa:	f100 0801 	add.w	r8, r0, #1
 8005afe:	1a09      	subs	r1, r1, r0
 8005b00:	459c      	cmp	ip, r3
 8005b02:	bf88      	it	hi
 8005b04:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005b08:	eba3 030c 	sub.w	r3, r3, ip
 8005b0c:	4432      	add	r2, r6
 8005b0e:	4640      	mov	r0, r8
 8005b10:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005b14:	f1be 0e01 	subs.w	lr, lr, #1
 8005b18:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b20:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b24:	d1db      	bne.n	8005ade <__ieee754_sqrt+0xba>
 8005b26:	430b      	orrs	r3, r1
 8005b28:	d006      	beq.n	8005b38 <__ieee754_sqrt+0x114>
 8005b2a:	1c50      	adds	r0, r2, #1
 8005b2c:	bf13      	iteet	ne
 8005b2e:	3201      	addne	r2, #1
 8005b30:	3401      	addeq	r4, #1
 8005b32:	4672      	moveq	r2, lr
 8005b34:	f022 0201 	bicne.w	r2, r2, #1
 8005b38:	1063      	asrs	r3, r4, #1
 8005b3a:	0852      	lsrs	r2, r2, #1
 8005b3c:	07e1      	lsls	r1, r4, #31
 8005b3e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005b42:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005b46:	bf48      	it	mi
 8005b48:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005b4c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005b50:	4614      	mov	r4, r2
 8005b52:	e781      	b.n	8005a58 <__ieee754_sqrt+0x34>
 8005b54:	0ad9      	lsrs	r1, r3, #11
 8005b56:	3815      	subs	r0, #21
 8005b58:	055b      	lsls	r3, r3, #21
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d0fa      	beq.n	8005b54 <__ieee754_sqrt+0x130>
 8005b5e:	02cd      	lsls	r5, r1, #11
 8005b60:	d50a      	bpl.n	8005b78 <__ieee754_sqrt+0x154>
 8005b62:	f1c2 0420 	rsb	r4, r2, #32
 8005b66:	fa23 f404 	lsr.w	r4, r3, r4
 8005b6a:	1e55      	subs	r5, r2, #1
 8005b6c:	4093      	lsls	r3, r2
 8005b6e:	4321      	orrs	r1, r4
 8005b70:	1b42      	subs	r2, r0, r5
 8005b72:	e78a      	b.n	8005a8a <__ieee754_sqrt+0x66>
 8005b74:	4610      	mov	r0, r2
 8005b76:	e7f0      	b.n	8005b5a <__ieee754_sqrt+0x136>
 8005b78:	0049      	lsls	r1, r1, #1
 8005b7a:	3201      	adds	r2, #1
 8005b7c:	e7ef      	b.n	8005b5e <__ieee754_sqrt+0x13a>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	e7bd      	b.n	8005afe <__ieee754_sqrt+0xda>
 8005b82:	bf00      	nop
 8005b84:	7ff00000 	.word	0x7ff00000

08005b88 <_init>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr

08005b94 <_fini>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr
