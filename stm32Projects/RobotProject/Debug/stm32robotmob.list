
stm32robotmob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800389c  0800389c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  080038b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080038b0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e909  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b22  00000000  00000000  0002e945  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00030468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  00031080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020165  00000000  00000000  00031bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c312  00000000  00000000  00051d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5d89  00000000  00000000  0005e047  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123dd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  00123e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800384c 	.word	0x0800384c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800384c 	.word	0x0800384c

080001d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b23      	ldr	r3, [pc, #140]	; (8000278 <MX_GPIO_Init+0xa4>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a22      	ldr	r2, [pc, #136]	; (8000278 <MX_GPIO_Init+0xa4>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b20      	ldr	r3, [pc, #128]	; (8000278 <MX_GPIO_Init+0xa4>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	60bb      	str	r3, [r7, #8]
 8000200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000202:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <MX_GPIO_Init+0xa4>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <MX_GPIO_Init+0xa4>)
 8000208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <MX_GPIO_Init+0xa4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000220:	4816      	ldr	r0, [pc, #88]	; (800027c <MX_GPIO_Init+0xa8>)
 8000222:	f000 fd71 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 7140 	mov.w	r1, #768	; 0x300
 800022c:	4814      	ldr	r0, [pc, #80]	; (8000280 <MX_GPIO_Init+0xac>)
 800022e:	f000 fd6b 	bl	8000d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000232:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000238:	2301      	movs	r3, #1
 800023a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4619      	mov	r1, r3
 800024a:	480c      	ldr	r0, [pc, #48]	; (800027c <MX_GPIO_Init+0xa8>)
 800024c:	f000 fbd2 	bl	80009f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000250:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000256:	2301      	movs	r3, #1
 8000258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000262:	f107 030c 	add.w	r3, r7, #12
 8000266:	4619      	mov	r1, r3
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_GPIO_Init+0xac>)
 800026a:	f000 fbc3 	bl	80009f4 <HAL_GPIO_Init>

}
 800026e:	bf00      	nop
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	48000800 	.word	0x48000800
 8000280:	48000400 	.word	0x48000400

08000284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000288:	f000 fa68 	bl	800075c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028c:	f000 f807 	bl	800029e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000290:	f7ff ffa0 	bl	80001d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000294:	f000 f9c4 	bl	8000620 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000298:	f000 f8ce 	bl	8000438 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x18>

0800029e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029e:	b580      	push	{r7, lr}
 80002a0:	b0a6      	sub	sp, #152	; 0x98
 80002a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a8:	2228      	movs	r2, #40	; 0x28
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f003 fac5 	bl	800383c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2258      	movs	r2, #88	; 0x58
 80002c6:	2100      	movs	r1, #0
 80002c8:	4618      	mov	r0, r3
 80002ca:	f003 fab7 	bl	800383c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002dc:	2302      	movs	r3, #2
 80002de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fd1b 	bl	8000d38 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000308:	f000 f82a 	bl	8000360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000326:	2102      	movs	r1, #2
 8000328:	4618      	mov	r0, r3
 800032a:	f001 fc1b 	bl	8001b64 <HAL_RCC_ClockConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000334:	f000 f814 	bl	8000360 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000338:	f241 0301 	movw	r3, #4097	; 0x1001
 800033c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000342:	2300      	movs	r3, #0
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fe41 	bl	8001fd0 <HAL_RCCEx_PeriphCLKConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000354:	f000 f804 	bl	8000360 <Error_Handler>
  }
}
 8000358:	bf00      	nop
 800035a:	3798      	adds	r7, #152	; 0x98
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x44>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x44>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x44>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <HAL_MspInit+0x44>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <HAL_MspInit+0x44>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_MspInit+0x44>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003a6:	2007      	movs	r0, #7
 80003a8:	f000 faf0 	bl	800098c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000

080003b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ca:	e7fe      	b.n	80003ca <HardFault_Handler+0x4>

080003cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <MemManage_Handler+0x4>

080003d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <BusFault_Handler+0x4>

080003d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <UsageFault_Handler+0x4>

080003de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040c:	f000 f9ec 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SystemInit+0x20>)
 800041a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <SystemInit+0x20>)
 8000420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b096      	sub	sp, #88	; 0x58
 800043c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800044a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	222c      	movs	r2, #44	; 0x2c
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f003 f9e9 	bl	800383c <memset>

  htim1.Instance = TIM1;
 800046a:	4b3f      	ldr	r3, [pc, #252]	; (8000568 <MX_TIM1_Init+0x130>)
 800046c:	4a3f      	ldr	r2, [pc, #252]	; (800056c <MX_TIM1_Init+0x134>)
 800046e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000470:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <MX_TIM1_Init+0x130>)
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000476:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <MX_TIM1_Init+0x130>)
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800047c:	4b3a      	ldr	r3, [pc, #232]	; (8000568 <MX_TIM1_Init+0x130>)
 800047e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000482:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b38      	ldr	r3, [pc, #224]	; (8000568 <MX_TIM1_Init+0x130>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800048a:	4b37      	ldr	r3, [pc, #220]	; (8000568 <MX_TIM1_Init+0x130>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b35      	ldr	r3, [pc, #212]	; (8000568 <MX_TIM1_Init+0x130>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000496:	4834      	ldr	r0, [pc, #208]	; (8000568 <MX_TIM1_Init+0x130>)
 8000498:	f001 ffb8 	bl	800240c <HAL_TIM_PWM_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004a2:	f7ff ff5d 	bl	8000360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004aa:	2300      	movs	r3, #0
 80004ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004b6:	4619      	mov	r1, r3
 80004b8:	482b      	ldr	r0, [pc, #172]	; (8000568 <MX_TIM1_Init+0x130>)
 80004ba:	f002 fcb7 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004c4:	f7ff ff4c 	bl	8000360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c8:	2360      	movs	r3, #96	; 0x60
 80004ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004d0:	2300      	movs	r3, #0
 80004d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004dc:	2300      	movs	r3, #0
 80004de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004e8:	2200      	movs	r2, #0
 80004ea:	4619      	mov	r1, r3
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <MX_TIM1_Init+0x130>)
 80004ee:	f001 ffe5 	bl	80024bc <HAL_TIM_PWM_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80004f8:	f7ff ff32 	bl	8000360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000500:	2204      	movs	r2, #4
 8000502:	4619      	mov	r1, r3
 8000504:	4818      	ldr	r0, [pc, #96]	; (8000568 <MX_TIM1_Init+0x130>)
 8000506:	f001 ffd9 	bl	80024bc <HAL_TIM_PWM_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000510:	f7ff ff26 	bl	8000360 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800053a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <MX_TIM1_Init+0x130>)
 800054a:	f002 fcfb 	bl	8002f44 <HAL_TIMEx_ConfigBreakDeadTime>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000554:	f7ff ff04 	bl	8000360 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <MX_TIM1_Init+0x130>)
 800055a:	f000 f829 	bl	80005b0 <HAL_TIM_MspPostInit>

}
 800055e:	bf00      	nop
 8000560:	3758      	adds	r7, #88	; 0x58
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028
 800056c:	40012c00 	.word	0x40012c00

08000570 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <HAL_TIM_PWM_MspInit+0x38>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d10b      	bne.n	800059a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a09      	ldr	r2, [pc, #36]	; (80005ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <HAL_TIM_PWM_MspInit+0x3c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a11      	ldr	r2, [pc, #68]	; (8000614 <HAL_TIM_MspPostInit+0x64>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d11b      	bne.n	800060a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_TIM_MspPostInit+0x68>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <HAL_TIM_MspPostInit+0x68>)
 80005d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_TIM_MspPostInit+0x68>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <HAL_TIM_MspPostInit+0x6c>)
 8000606:	f000 f9f5 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800060a:	bf00      	nop
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40012c00 	.word	0x40012c00
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800

08000620 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART1_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800062c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART1_UART_Init+0x58>)
 8000664:	f002 fcf4 	bl	8003050 <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f7ff fe77 	bl	8000360 <Error_Handler>
  }

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000074 	.word	0x20000074
 800067c:	40013800 	.word	0x40013800

08000680 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_UART_MspInit+0x7c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d127      	bne.n	80006f2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d2:	2330      	movs	r3, #48	; 0x30
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006e2:	2307      	movs	r3, #7
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <HAL_UART_MspInit+0x84>)
 80006ee:	f000 f981 	bl	80009f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40013800 	.word	0x40013800
 8000700:	40021000 	.word	0x40021000
 8000704:	48000800 	.word	0x48000800

08000708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000740 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490e      	ldr	r1, [pc, #56]	; (8000748 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000732:	f7ff fe6f 	bl	8000414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000736:	f003 f85d 	bl	80037f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800073a:	f7ff fda3 	bl	8000284 <main>

0800073e <LoopForever>:

LoopForever:
    b LoopForever
 800073e:	e7fe      	b.n	800073e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800074c:	080038a4 	.word	0x080038a4
  ldr r2, =_sbss
 8000750:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000754:	200000fc 	.word	0x200000fc

08000758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC1_2_IRQHandler>
	...

0800075c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_Init+0x28>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_Init+0x28>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800076c:	2003      	movs	r0, #3
 800076e:	f000 f90d 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000772:	2000      	movs	r0, #0
 8000774:	f000 f808 	bl	8000788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000778:	f7ff fdfa 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40022000 	.word	0x40022000

08000788 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_InitTick+0x54>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_InitTick+0x58>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f917 	bl	80009da <HAL_SYSTICK_Config>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00e      	b.n	80007d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d80a      	bhi.n	80007d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007bc:	2200      	movs	r2, #0
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c4:	f000 f8ed 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_InitTick+0x5c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007ce:	2300      	movs	r3, #0
 80007d0:	e000      	b.n	80007d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008
 800080c:	200000f8 	.word	0x200000f8

08000810 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;  
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	200000f8 	.word	0x200000f8

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	; (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	; (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	; 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096c:	f7ff ff8e 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff47 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff5c 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff8e 	bl	80008e0 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffb0 	bl	8000948 <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e160      	b.n	8000cc6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8152 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0203 	and.w	r2, r3, #3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80ac 	beq.w	8000cc0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a5d      	ldr	r2, [pc, #372]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6193      	str	r3, [r2, #24]
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <HAL_GPIO_Init+0x2f0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b80:	4a59      	ldr	r2, [pc, #356]	; (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	220f      	movs	r2, #15
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000baa:	d025      	beq.n	8000bf8 <HAL_GPIO_Init+0x204>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_GPIO_Init+0x2f8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d01f      	beq.n	8000bf4 <HAL_GPIO_Init+0x200>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	; (8000cf0 <HAL_GPIO_Init+0x2fc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d019      	beq.n	8000bf0 <HAL_GPIO_Init+0x1fc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <HAL_GPIO_Init+0x300>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d013      	beq.n	8000bec <HAL_GPIO_Init+0x1f8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a4c      	ldr	r2, [pc, #304]	; (8000cf8 <HAL_GPIO_Init+0x304>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <HAL_GPIO_Init+0x1f4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <HAL_GPIO_Init+0x308>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x1f0>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a4a      	ldr	r2, [pc, #296]	; (8000d00 <HAL_GPIO_Init+0x30c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d101      	bne.n	8000be0 <HAL_GPIO_Init+0x1ec>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e00c      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be0:	2307      	movs	r3, #7
 8000be2:	e00a      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bec:	2303      	movs	r3, #3
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x206>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c0a:	4937      	ldr	r1, [pc, #220]	; (8000ce8 <HAL_GPIO_Init+0x2f4>)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c3c:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c42:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f47f ae97 	bne.w	8000a04 <HAL_GPIO_Init+0x10>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000c00 	.word	0x48000c00
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	48001400 	.word	0x48001400
 8000d00:	48001800 	.word	0x48001800
 8000d04:	40010400 	.word	0x40010400

08000d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	807b      	strh	r3, [r7, #2]
 8000d14:	4613      	mov	r3, r2
 8000d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d18:	787b      	ldrb	r3, [r7, #1]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d26:	887a      	ldrh	r2, [r7, #2]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	f000 bf01 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	f000 8160 	beq.w	8001022 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d62:	4bae      	ldr	r3, [pc, #696]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d00c      	beq.n	8000d88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6e:	4bab      	ldr	r3, [pc, #684]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d159      	bne.n	8000e2e <HAL_RCC_OscConfig+0xf6>
 8000d7a:	4ba8      	ldr	r3, [pc, #672]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d86:	d152      	bne.n	8000e2e <HAL_RCC_OscConfig+0xf6>
 8000d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d94:	fa93 f3a3 	rbit	r3, r3
 8000d98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d102      	bne.n	8000dba <HAL_RCC_OscConfig+0x82>
 8000db4:	4b99      	ldr	r3, [pc, #612]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	e015      	b.n	8000de6 <HAL_RCC_OscConfig+0xae>
 8000dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000dd6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000de2:	4b8e      	ldr	r3, [pc, #568]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000df2:	fa92 f2a2 	rbit	r2, r2
 8000df6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dfa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f042 0220 	orr.w	r2, r2, #32
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	f002 021f 	and.w	r2, r2, #31
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	4013      	ands	r3, r2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8102 	beq.w	8001020 <HAL_RCC_OscConfig+0x2e8>
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 80fc 	bne.w	8001020 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	f000 be93 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e38:	d106      	bne.n	8000e48 <HAL_RCC_OscConfig+0x110>
 8000e3a:	4b78      	ldr	r3, [pc, #480]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a77      	ldr	r2, [pc, #476]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e030      	b.n	8000eaa <HAL_RCC_OscConfig+0x172>
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x134>
 8000e52:	4b72      	ldr	r3, [pc, #456]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a71      	ldr	r2, [pc, #452]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	4b6f      	ldr	r3, [pc, #444]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a6e      	ldr	r2, [pc, #440]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	e01e      	b.n	8000eaa <HAL_RCC_OscConfig+0x172>
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e76:	d10c      	bne.n	8000e92 <HAL_RCC_OscConfig+0x15a>
 8000e78:	4b68      	ldr	r3, [pc, #416]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a67      	ldr	r2, [pc, #412]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b65      	ldr	r3, [pc, #404]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a64      	ldr	r2, [pc, #400]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e00b      	b.n	8000eaa <HAL_RCC_OscConfig+0x172>
 8000e92:	4b62      	ldr	r3, [pc, #392]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a61      	ldr	r2, [pc, #388]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a5e      	ldr	r2, [pc, #376]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000ea4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d059      	beq.n	8000f68 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fcac 	bl	8000810 <HAL_GetTick>
 8000eb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebc:	e00a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ebe:	f7ff fca7 	bl	8000810 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d902      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f000 be40 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8000ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000edc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ee8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eec:	fab3 f383 	clz	r3, r3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d102      	bne.n	8000f06 <HAL_RCC_OscConfig+0x1ce>
 8000f00:	4b46      	ldr	r3, [pc, #280]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0x1fa>
 8000f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f12:	fa93 f3a3 	rbit	r3, r3
 8000f16:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f22:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f36:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f3a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f3e:	fa92 f2a2 	rbit	r2, r2
 8000f42:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f46:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f4a:	fab2 f282 	clz	r2, r2
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	f042 0220 	orr.w	r2, r2, #32
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f002 021f 	and.w	r2, r2, #31
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0ab      	beq.n	8000ebe <HAL_RCC_OscConfig+0x186>
 8000f66:	e05c      	b.n	8001022 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc52 	bl	8000810 <HAL_GetTick>
 8000f6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f72:	f7ff fc4d 	bl	8000810 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d902      	bls.n	8000f88 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f000 bde6 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8000f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <HAL_RCC_OscConfig+0x282>
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x2ae>
 8000fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fd6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_RCC_OscConfig+0x2e4>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ff2:	fa92 f2a2 	rbit	r2, r2
 8000ff6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000ffa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	f042 0220 	orr.w	r2, r2, #32
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f002 021f 	and.w	r2, r2, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ab      	bne.n	8000f72 <HAL_RCC_OscConfig+0x23a>
 800101a:	e002      	b.n	8001022 <HAL_RCC_OscConfig+0x2ea>
 800101c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 8170 	beq.w	8001312 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001032:	4bd0      	ldr	r3, [pc, #832]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00c      	beq.n	8001058 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800103e:	4bcd      	ldr	r3, [pc, #820]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b08      	cmp	r3, #8
 8001048:	d16d      	bne.n	8001126 <HAL_RCC_OscConfig+0x3ee>
 800104a:	4bca      	ldr	r3, [pc, #808]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001056:	d166      	bne.n	8001126 <HAL_RCC_OscConfig+0x3ee>
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001062:	fa93 f3a3 	rbit	r3, r3
 8001066:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800106a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	b2db      	uxtb	r3, r3
 8001074:	095b      	lsrs	r3, r3, #5
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d102      	bne.n	8001088 <HAL_RCC_OscConfig+0x350>
 8001082:	4bbc      	ldr	r3, [pc, #752]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	e013      	b.n	80010b0 <HAL_RCC_OscConfig+0x378>
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800109a:	2302      	movs	r3, #2
 800109c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010ac:	4bb1      	ldr	r3, [pc, #708]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	2202      	movs	r2, #2
 80010b2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80010b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80010ba:	fa92 f2a2 	rbit	r2, r2
 80010be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80010c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010c6:	fab2 f282 	clz	r2, r2
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3ba>
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d002      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	f000 bd31 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	21f8      	movs	r1, #248	; 0xf8
 8001102:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800110a:	fa91 f1a1 	rbit	r1, r1
 800110e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001112:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001116:	fab1 f181 	clz	r1, r1
 800111a:	b2c9      	uxtb	r1, r1
 800111c:	408b      	lsls	r3, r1
 800111e:	4995      	ldr	r1, [pc, #596]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001124:	e0f5      	b.n	8001312 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8085 	beq.w	800123c <HAL_RCC_OscConfig+0x504>
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001144:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001152:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115e:	f7ff fb57 	bl	8000810 <HAL_GetTick>
 8001162:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	e00a      	b.n	800117e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fb52 	bl	8000810 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d902      	bls.n	800117e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	f000 bceb 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001190:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	fab3 f383 	clz	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_OscConfig+0x476>
 80011a8:	4b72      	ldr	r3, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	e013      	b.n	80011d6 <HAL_RCC_OscConfig+0x49e>
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	2202      	movs	r2, #2
 80011d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011e0:	fa92 f2a2 	rbit	r2, r2
 80011e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ec:	fab2 f282 	clz	r2, r2
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0af      	beq.n	8001168 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	21f8      	movs	r1, #248	; 0xf8
 8001218:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001220:	fa91 f1a1 	rbit	r1, r1
 8001224:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001228:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800122c:	fab1 f181 	clz	r1, r1
 8001230:	b2c9      	uxtb	r1, r1
 8001232:	408b      	lsls	r3, r1
 8001234:	494f      	ldr	r1, [pc, #316]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
 800123a:	e06a      	b.n	8001312 <HAL_RCC_OscConfig+0x5da>
 800123c:	2301      	movs	r3, #1
 800123e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800124e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800125c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	2300      	movs	r3, #0
 8001266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fad2 	bl	8000810 <HAL_GetTick>
 800126c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff facd 	bl	8000810 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 bc66 	b.w	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800129a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <HAL_RCC_OscConfig+0x580>
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	e013      	b.n	80012e0 <HAL_RCC_OscConfig+0x5a8>
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012d4:	fa93 f3a3 	rbit	r3, r3
 80012d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_RCC_OscConfig+0x63c>)
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	2202      	movs	r2, #2
 80012e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012ea:	fa92 f2a2 	rbit	r2, r2
 80012ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f002 021f 	and.w	r2, r2, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1af      	bne.n	8001272 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80da 	beq.w	80014d6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d069      	beq.n	8001400 <HAL_RCC_OscConfig+0x6c8>
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800133e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x640>)
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	461a      	mov	r2, r3
 8001352:	2301      	movs	r3, #1
 8001354:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff fa5b 	bl	8000810 <HAL_GetTick>
 800135a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e00d      	b.n	800137c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fa56 	bl	8000810 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d905      	bls.n	800137c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e3ef      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001374:	40021000 	.word	0x40021000
 8001378:	10908120 	.word	0x10908120
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013ac:	2202      	movs	r2, #2
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	fa93 f2a3 	rbit	r2, r3
 80013ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c0:	4ba4      	ldr	r3, [pc, #656]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80013c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013c8:	2102      	movs	r1, #2
 80013ca:	6019      	str	r1, [r3, #0]
 80013cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f1a3 	rbit	r1, r3
 80013d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013da:	6019      	str	r1, [r3, #0]
  return result;
 80013dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0b0      	beq.n	8001360 <HAL_RCC_OscConfig+0x628>
 80013fe:	e06a      	b.n	80014d6 <HAL_RCC_OscConfig+0x79e>
 8001400:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	fa93 f2a3 	rbit	r2, r3
 8001412:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001416:	601a      	str	r2, [r3, #0]
  return result;
 8001418:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800141c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4b8c      	ldr	r3, [pc, #560]	; (8001658 <HAL_RCC_OscConfig+0x920>)
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	2300      	movs	r3, #0
 8001430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff f9ed 	bl	8000810 <HAL_GetTick>
 8001436:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143a:	e009      	b.n	8001450 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff f9e8 	bl	8000810 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e381      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001450:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800146c:	2202      	movs	r2, #2
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001496:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b6e      	ldr	r3, [pc, #440]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 800149a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a0:	2102      	movs	r1, #2
 80014a2:	6019      	str	r1, [r3, #0]
 80014a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f1a3 	rbit	r1, r3
 80014ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014b2:	6019      	str	r1, [r3, #0]
  return result;
 80014b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1b2      	bne.n	800143c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8157 	beq.w	8001794 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d112      	bne.n	800151e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	4a55      	ldr	r2, [pc, #340]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	61d3      	str	r3, [r2, #28]
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001518:	2301      	movs	r3, #1
 800151a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b4f      	ldr	r3, [pc, #316]	; (800165c <HAL_RCC_OscConfig+0x924>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d11a      	bne.n	8001560 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b4c      	ldr	r3, [pc, #304]	; (800165c <HAL_RCC_OscConfig+0x924>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_RCC_OscConfig+0x924>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff f96b 	bl	8000810 <HAL_GetTick>
 800153a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	e009      	b.n	8001554 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001540:	f7ff f966 	bl	8000810 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e2ff      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_RCC_OscConfig+0x924>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ef      	beq.n	8001540 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x840>
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a39      	ldr	r2, [pc, #228]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	e02f      	b.n	80015d8 <HAL_RCC_OscConfig+0x8a0>
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x864>
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a33      	ldr	r2, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a30      	ldr	r2, [pc, #192]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0x8a0>
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x888>
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6213      	str	r3, [r2, #32]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0x8a0>
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 80015d2:	f023 0304 	bic.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d06a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff f915 	bl	8000810 <HAL_GetTick>
 80015e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff f910 	bl	8000810 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e2a7      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001604:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fa93 f2a3 	rbit	r2, r3
 8001616:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001620:	2202      	movs	r2, #2
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001632:	601a      	str	r2, [r3, #0]
  return result;
 8001634:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001638:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	095b      	lsrs	r3, r3, #5
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d108      	bne.n	8001660 <HAL_RCC_OscConfig+0x928>
 800164e:	4b01      	ldr	r3, [pc, #4]	; (8001654 <HAL_RCC_OscConfig+0x91c>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	e013      	b.n	800167c <HAL_RCC_OscConfig+0x944>
 8001654:	40021000 	.word	0x40021000
 8001658:	10908120 	.word	0x10908120
 800165c:	40007000 	.word	0x40007000
 8001660:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fa93 f2a3 	rbit	r2, r3
 8001672:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	4bc0      	ldr	r3, [pc, #768]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001680:	2102      	movs	r1, #2
 8001682:	6011      	str	r1, [r2, #0]
 8001684:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	fa92 f1a2 	rbit	r1, r2
 800168e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001692:	6011      	str	r1, [r2, #0]
  return result;
 8001694:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	fab2 f282 	clz	r2, r2
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	f002 021f 	and.w	r2, r2, #31
 80016aa:	2101      	movs	r1, #1
 80016ac:	fa01 f202 	lsl.w	r2, r1, r2
 80016b0:	4013      	ands	r3, r2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d09a      	beq.n	80015ec <HAL_RCC_OscConfig+0x8b4>
 80016b6:	e063      	b.n	8001780 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f8aa 	bl	8000810 <HAL_GetTick>
 80016bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00b      	b.n	80016da <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff f8a5 	bl	8000810 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e23c      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 80016da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	fa93 f2a3 	rbit	r2, r3
 80016ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f6:	2202      	movs	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001708:	601a      	str	r2, [r3, #0]
  return result;
 800170a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800170e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	fab3 f383 	clz	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f043 0302 	orr.w	r3, r3, #2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d102      	bne.n	800172a <HAL_RCC_OscConfig+0x9f2>
 8001724:	4b95      	ldr	r3, [pc, #596]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	e00d      	b.n	8001746 <HAL_RCC_OscConfig+0xa0e>
 800172a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800172e:	2202      	movs	r2, #2
 8001730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f2a3 	rbit	r2, r3
 800173c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	4b8e      	ldr	r3, [pc, #568]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800174a:	2102      	movs	r1, #2
 800174c:	6011      	str	r1, [r2, #0]
 800174e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fa92 f1a2 	rbit	r1, r2
 8001758:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800175c:	6011      	str	r1, [r2, #0]
  return result;
 800175e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f002 021f 	and.w	r2, r2, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1a0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001780:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4a7b      	ldr	r2, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 800178e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001792:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 81d9 	beq.w	8001b52 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a0:	4b76      	ldr	r3, [pc, #472]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	f000 81a6 	beq.w	8001afa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 811e 	bne.w	80019f6 <HAL_RCC_OscConfig+0xcbe>
 80017ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	fa93 f2a3 	rbit	r2, r3
 80017ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017d2:	601a      	str	r2, [r3, #0]
  return result;
 80017d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	461a      	mov	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f80e 	bl	8000810 <HAL_GetTick>
 80017f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f8:	e009      	b.n	800180e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff f809 	bl	8000810 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1a2      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 800180e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001812:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001826:	601a      	str	r2, [r3, #0]
  return result;
 8001828:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800182c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	095b      	lsrs	r3, r3, #5
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d102      	bne.n	8001848 <HAL_RCC_OscConfig+0xb10>
 8001842:	4b4e      	ldr	r3, [pc, #312]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0xb48>
 8001848:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800184c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001884:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001888:	6011      	str	r1, [r2, #0]
 800188a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	fa92 f1a2 	rbit	r1, r2
 8001894:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001898:	6011      	str	r1, [r2, #0]
  return result;
 800189a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	fab2 f282 	clz	r2, r2
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	f002 021f 	and.w	r2, r2, #31
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d19e      	bne.n	80017fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f023 020f 	bic.w	r2, r3, #15
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	492c      	ldr	r1, [pc, #176]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6a19      	ldr	r1, [r3, #32]
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	4925      	ldr	r1, [pc, #148]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
 80018ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001904:	601a      	str	r2, [r3, #0]
  return result;
 8001906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800190a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	fab3 f383 	clz	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001916:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	461a      	mov	r2, r3
 800191e:	2301      	movs	r3, #1
 8001920:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7fe ff75 	bl	8000810 <HAL_GetTick>
 8001926:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192a:	e009      	b.n	8001940 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe ff70 	bl	8000810 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e109      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001940:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001958:	601a      	str	r2, [r3, #0]
  return result;
 800195a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800195e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0xc48>
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <HAL_RCC_OscConfig+0xc44>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e01e      	b.n	80019b8 <HAL_RCC_OscConfig+0xc80>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800199e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b6a      	ldr	r3, [pc, #424]	; (8001b60 <HAL_RCC_OscConfig+0xe28>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019c0:	6011      	str	r1, [r2, #0]
 80019c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fa92 f1a2 	rbit	r1, r2
 80019cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019d0:	6011      	str	r1, [r2, #0]
  return result;
 80019d2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	fab2 f282 	clz	r2, r2
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	f002 021f 	and.w	r2, r2, #31
 80019e8:	2101      	movs	r1, #1
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d09b      	beq.n	800192c <HAL_RCC_OscConfig+0xbf4>
 80019f4:	e0ad      	b.n	8001b52 <HAL_RCC_OscConfig+0xe1a>
 80019f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe fef0 	bl	8000810 <HAL_GetTick>
 8001a30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe feeb 	bl	8000810 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e084      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
 8001a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	fa93 f2a3 	rbit	r2, r3
 8001a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a62:	601a      	str	r2, [r3, #0]
  return result;
 8001a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0xd4c>
 8001a7e:	4b38      	ldr	r3, [pc, #224]	; (8001b60 <HAL_RCC_OscConfig+0xe28>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e01b      	b.n	8001abc <HAL_RCC_OscConfig+0xd84>
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f107 0318 	add.w	r3, r7, #24
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <HAL_RCC_OscConfig+0xe28>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f107 0214 	add.w	r2, r7, #20
 8001ac0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	f107 0214 	add.w	r2, r7, #20
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fa92 f1a2 	rbit	r1, r2
 8001ad0:	f107 0210 	add.w	r2, r7, #16
 8001ad4:	6011      	str	r1, [r2, #0]
  return result;
 8001ad6:	f107 0210 	add.w	r2, r7, #16
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fab2 f282 	clz	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f042 0220 	orr.w	r2, r2, #32
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	f002 021f 	and.w	r2, r2, #31
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d19e      	bne.n	8001a36 <HAL_RCC_OscConfig+0xcfe>
 8001af8:	e02b      	b.n	8001b52 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e025      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b08:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0xe28>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_RCC_OscConfig+0xe28>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b1c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d111      	bne.n	8001b4e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d108      	bne.n	8001b4e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09e      	sub	sp, #120	; 0x78
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e162      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b90      	ldr	r3, [pc, #576]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b8d      	ldr	r3, [pc, #564]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	498b      	ldr	r1, [pc, #556]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e14a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b82      	ldr	r3, [pc, #520]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	497f      	ldr	r1, [pc, #508]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80dc 	beq.w	8001d90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d13c      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xf6>
 8001be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d102      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xa6>
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	e00f      	b.n	8001c2a <HAL_RCC_ClockConfig+0xc6>
 8001c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
 8001c18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8001c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001c30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0220 	orr.w	r2, r2, #32
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d17b      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0f3      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d13c      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x178>
 8001c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x128>
 8001c86:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e00f      	b.n	8001cac <HAL_RCC_ClockConfig+0x148>
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
 8001c9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8001ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8001cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cb4:	fa92 f2a2 	rbit	r2, r2
 8001cb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cbc:	fab2 f282 	clz	r2, r2
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f042 0220 	orr.w	r2, r2, #32
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	f002 021f 	and.w	r2, r2, #31
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d13a      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b2      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x1a0>
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e00d      	b.n	8001d20 <HAL_RCC_ClockConfig+0x1bc>
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d10:	2302      	movs	r3, #2
 8001d12:	623b      	str	r3, [r7, #32]
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	2202      	movs	r2, #2
 8001d22:	61ba      	str	r2, [r7, #24]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	fa92 f2a2 	rbit	r2, r2
 8001d2a:	617a      	str	r2, [r7, #20]
  return result;
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e079      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 0203 	bic.w	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d60:	f7fe fd56 	bl	8000810 <HAL_GetTick>
 8001d64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d68:	f7fe fd52 	bl	8000810 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e061      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_ClockConfig+0x260>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 020c 	and.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d1eb      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d214      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 0207 	bic.w	r2, r3, #7
 8001da6:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_RCC_ClockConfig+0x25c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e040      	b.n	8001e42 <HAL_RCC_ClockConfig+0x2de>
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_ClockConfig+0x2e8>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	491a      	ldr	r1, [pc, #104]	; (8001e4c <HAL_RCC_ClockConfig+0x2e8>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x2e8>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4912      	ldr	r1, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x2e8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e06:	f000 f829 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e0a:	4601      	mov	r1, r0
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_ClockConfig+0x2e8>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e14:	22f0      	movs	r2, #240	; 0xf0
 8001e16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	40d3      	lsrs	r3, r2
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x2ec>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <HAL_RCC_ClockConfig+0x2f0>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_RCC_ClockConfig+0x2f4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fca4 	bl	8000788 <HAL_InitTick>
  
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3778      	adds	r7, #120	; 0x78
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003864 	.word	0x08003864
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d002      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x30>
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x36>
 8001e8a:	e03f      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e8e:	623b      	str	r3, [r7, #32]
      break;
 8001e90:	e03f      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	607a      	str	r2, [r7, #4]
  return result;
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	40d3      	lsrs	r3, r2
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001eb2:	5cd3      	ldrb	r3, [r2, r3]
 8001eb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	fa92 f2a2 	rbit	r2, r2
 8001ec8:	60fa      	str	r2, [r7, #12]
  return result;
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	40d3      	lsrs	r3, r2
 8001ed4:	4a15      	ldr	r2, [pc, #84]	; (8001f2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef4:	e007      	b.n	8001f06 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	623b      	str	r3, [r7, #32]
      break;
 8001f0a:	e002      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f0e:	623b      	str	r3, [r7, #32]
      break;
 8001f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f12:	6a3b      	ldr	r3, [r7, #32]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	372c      	adds	r7, #44	; 0x2c
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	007a1200 	.word	0x007a1200
 8001f28:	0800387c 	.word	0x0800387c
 8001f2c:	0800388c 	.word	0x0800388c

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f4e:	f7ff ffef 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f52:	4601      	mov	r1, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	603a      	str	r2, [r7, #0]
  return result;
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	40d3      	lsrs	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003874 	.word	0x08003874

08001f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f92:	f7ff ffcd 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f96:	4601      	mov	r1, r0
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001fa0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fa4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	603a      	str	r2, [r7, #0]
  return result;
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	fab2 f282 	clz	r2, r2
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	40d3      	lsrs	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_RCC_GetPCLK2Freq+0x40>)
 8001fba:	5cd3      	ldrb	r3, [r2, r3]
 8001fbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08003874 	.word	0x08003874

08001fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b092      	sub	sp, #72	; 0x48
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80d4 	beq.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff4:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10e      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002000:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a4a      	ldr	r2, [pc, #296]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b48      	ldr	r3, [pc, #288]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7fe fbeb 	bl	8000810 <HAL_GetTick>
 800203a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7fe fbe7 	bl	8000810 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b64      	cmp	r3, #100	; 0x64
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e1d6      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002064:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8084 	beq.w	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002078:	429a      	cmp	r2, r3
 800207a:	d07c      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800207c:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002086:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	461a      	mov	r2, r3
 80020a6:	2301      	movs	r3, #1
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2300      	movs	r3, #0
 80020cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04b      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe fb97 	bl	8000810 <HAL_GetTick>
 80020e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fb93 	bl	8000810 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e180      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	61fb      	str	r3, [r7, #28]
  return result;
 8002114:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d108      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800212a:	4b01      	ldr	r3, [pc, #4]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	e00d      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
 8002138:	10908100 	.word	0x10908100
 800213c:	2302      	movs	r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	2202      	movs	r2, #2
 800214e:	613a      	str	r2, [r7, #16]
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	60fa      	str	r2, [r7, #12]
  return result;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f002 021f 	and.w	r2, r2, #31
 800216a:	2101      	movs	r1, #1
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0b7      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4992      	ldr	r1, [pc, #584]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002188:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	4a8d      	ldr	r2, [pc, #564]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a8:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4985      	ldr	r1, [pc, #532]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c6:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	497e      	ldr	r1, [pc, #504]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e4:	4b79      	ldr	r3, [pc, #484]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4976      	ldr	r1, [pc, #472]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f023 0210 	bic.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	496f      	ldr	r1, [pc, #444]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	4967      	ldr	r1, [pc, #412]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800223e:	4b63      	ldr	r3, [pc, #396]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f023 0220 	bic.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4960      	ldr	r1, [pc, #384]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800224c:	4313      	orrs	r3, r2
 800224e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800225c:	4b5b      	ldr	r3, [pc, #364]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	4958      	ldr	r1, [pc, #352]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d008      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800227a:	4b54      	ldr	r3, [pc, #336]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4951      	ldr	r1, [pc, #324]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002298:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4949      	ldr	r1, [pc, #292]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b6:	4b45      	ldr	r3, [pc, #276]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4942      	ldr	r1, [pc, #264]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	493a      	ldr	r1, [pc, #232]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80022f2:	4b36      	ldr	r3, [pc, #216]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	4933      	ldr	r1, [pc, #204]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002310:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	492b      	ldr	r1, [pc, #172]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800231e:	4313      	orrs	r3, r2
 8002320:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4924      	ldr	r1, [pc, #144]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800233c:	4313      	orrs	r3, r2
 800233e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800234c:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	491c      	ldr	r1, [pc, #112]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	4915      	ldr	r1, [pc, #84]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	490d      	ldr	r1, [pc, #52]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	4906      	ldr	r1, [pc, #24]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00c      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	e002      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	490b      	ldr	r1, [pc, #44]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	4904      	ldr	r1, [pc, #16]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3748      	adds	r7, #72	; 0x48
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e049      	b.n	80024b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe f89c 	bl	8000570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f000 f94a 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0ff      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b14      	cmp	r3, #20
 80024e6:	f200 80f0 	bhi.w	80026ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002545 	.word	0x08002545
 80024f4:	080026cb 	.word	0x080026cb
 80024f8:	080026cb 	.word	0x080026cb
 80024fc:	080026cb 	.word	0x080026cb
 8002500:	08002585 	.word	0x08002585
 8002504:	080026cb 	.word	0x080026cb
 8002508:	080026cb 	.word	0x080026cb
 800250c:	080026cb 	.word	0x080026cb
 8002510:	080025c7 	.word	0x080025c7
 8002514:	080026cb 	.word	0x080026cb
 8002518:	080026cb 	.word	0x080026cb
 800251c:	080026cb 	.word	0x080026cb
 8002520:	08002607 	.word	0x08002607
 8002524:	080026cb 	.word	0x080026cb
 8002528:	080026cb 	.word	0x080026cb
 800252c:	080026cb 	.word	0x080026cb
 8002530:	08002649 	.word	0x08002649
 8002534:	080026cb 	.word	0x080026cb
 8002538:	080026cb 	.word	0x080026cb
 800253c:	080026cb 	.word	0x080026cb
 8002540:	08002689 	.word	0x08002689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f968 	bl	8002820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
      break;
 8002582:	e0a5      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f9e2 	bl	8002954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6999      	ldr	r1, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	619a      	str	r2, [r3, #24]
      break;
 80025c4:	e084      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa55 	bl	8002a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      break;
 8002604:	e064      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fac7 	bl	8002ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69d9      	ldr	r1, [r3, #28]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	61da      	str	r2, [r3, #28]
      break;
 8002646:	e043      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fb16 	bl	8002c80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002686:	e023      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fb60 	bl	8002d54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	021a      	lsls	r2, r3, #8
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
      break;
 80026ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a42      	ldr	r2, [pc, #264]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d013      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002702:	d00f      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <TIM_Base_SetConfig+0x120>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3e      	ldr	r2, [pc, #248]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3d      	ldr	r2, [pc, #244]	; (800280c <TIM_Base_SetConfig+0x128>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_Base_SetConfig+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d108      	bne.n	8002736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a31      	ldr	r2, [pc, #196]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01f      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d01b      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <TIM_Base_SetConfig+0x120>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d017      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <TIM_Base_SetConfig+0x124>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a2c      	ldr	r2, [pc, #176]	; (800280c <TIM_Base_SetConfig+0x128>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a2c      	ldr	r2, [pc, #176]	; (8002814 <TIM_Base_SetConfig+0x130>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00b      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a2b      	ldr	r2, [pc, #172]	; (8002818 <TIM_Base_SetConfig+0x134>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <TIM_Base_SetConfig+0x138>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_Base_SetConfig+0x9a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a25      	ldr	r2, [pc, #148]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d108      	bne.n	8002790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <TIM_Base_SetConfig+0x11c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <TIM_Base_SetConfig+0x100>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <TIM_Base_SetConfig+0x128>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00f      	beq.n	80027e4 <TIM_Base_SetConfig+0x100>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a13      	ldr	r2, [pc, #76]	; (8002814 <TIM_Base_SetConfig+0x130>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00b      	beq.n	80027e4 <TIM_Base_SetConfig+0x100>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <TIM_Base_SetConfig+0x134>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <TIM_Base_SetConfig+0x100>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <TIM_Base_SetConfig+0x138>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d003      	beq.n	80027e4 <TIM_Base_SetConfig+0x100>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <TIM_Base_SetConfig+0x12c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d103      	bne.n	80027ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	615a      	str	r2, [r3, #20]
}
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40013400 	.word	0x40013400
 8002810:	40015000 	.word	0x40015000
 8002814:	40014000 	.word	0x40014000
 8002818:	40014400 	.word	0x40014400
 800281c:	40014800 	.word	0x40014800

08002820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <TIM_OC1_SetConfig+0x11c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <TIM_OC1_SetConfig+0x88>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <TIM_OC1_SetConfig+0x120>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00f      	beq.n	80028a8 <TIM_OC1_SetConfig+0x88>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <TIM_OC1_SetConfig+0x124>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00b      	beq.n	80028a8 <TIM_OC1_SetConfig+0x88>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a2d      	ldr	r2, [pc, #180]	; (8002948 <TIM_OC1_SetConfig+0x128>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <TIM_OC1_SetConfig+0x88>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a2c      	ldr	r2, [pc, #176]	; (800294c <TIM_OC1_SetConfig+0x12c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d003      	beq.n	80028a8 <TIM_OC1_SetConfig+0x88>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <TIM_OC1_SetConfig+0x130>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10c      	bne.n	80028c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f023 0308 	bic.w	r3, r3, #8
 80028ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f023 0304 	bic.w	r3, r3, #4
 80028c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <TIM_OC1_SetConfig+0x11c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <TIM_OC1_SetConfig+0xd2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <TIM_OC1_SetConfig+0x120>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00f      	beq.n	80028f2 <TIM_OC1_SetConfig+0xd2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <TIM_OC1_SetConfig+0x124>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00b      	beq.n	80028f2 <TIM_OC1_SetConfig+0xd2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1a      	ldr	r2, [pc, #104]	; (8002948 <TIM_OC1_SetConfig+0x128>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <TIM_OC1_SetConfig+0xd2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <TIM_OC1_SetConfig+0x12c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_OC1_SetConfig+0xd2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <TIM_OC1_SetConfig+0x130>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d111      	bne.n	8002916 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	621a      	str	r2, [r3, #32]
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40013400 	.word	0x40013400
 8002944:	40014000 	.word	0x40014000
 8002948:	40014400 	.word	0x40014400
 800294c:	40014800 	.word	0x40014800
 8002950:	40015000 	.word	0x40015000

08002954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0210 	bic.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0320 	bic.w	r3, r3, #32
 80029a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <TIM_OC2_SetConfig+0x110>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <TIM_OC2_SetConfig+0x74>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a2b      	ldr	r2, [pc, #172]	; (8002a68 <TIM_OC2_SetConfig+0x114>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <TIM_OC2_SetConfig+0x74>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <TIM_OC2_SetConfig+0x118>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <TIM_OC2_SetConfig+0x110>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <TIM_OC2_SetConfig+0xc0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <TIM_OC2_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00f      	beq.n	8002a14 <TIM_OC2_SetConfig+0xc0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <TIM_OC2_SetConfig+0x11c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00b      	beq.n	8002a14 <TIM_OC2_SetConfig+0xc0>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	; (8002a74 <TIM_OC2_SetConfig+0x120>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <TIM_OC2_SetConfig+0xc0>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <TIM_OC2_SetConfig+0x124>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_OC2_SetConfig+0xc0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <TIM_OC2_SetConfig+0x118>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d113      	bne.n	8002a3c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a1a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a22:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40015000 	.word	0x40015000
 8002a70:	40014000 	.word	0x40014000
 8002a74:	40014400 	.word	0x40014400
 8002a78:	40014800 	.word	0x40014800

08002a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2b      	ldr	r2, [pc, #172]	; (8002b88 <TIM_OC3_SetConfig+0x10c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_OC3_SetConfig+0x72>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <TIM_OC3_SetConfig+0x110>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC3_SetConfig+0x72>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <TIM_OC3_SetConfig+0x114>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10d      	bne.n	8002b0a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b08:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1e      	ldr	r2, [pc, #120]	; (8002b88 <TIM_OC3_SetConfig+0x10c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_OC3_SetConfig+0xbe>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC3_SetConfig+0x110>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_OC3_SetConfig+0xbe>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <TIM_OC3_SetConfig+0x118>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_OC3_SetConfig+0xbe>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1c      	ldr	r2, [pc, #112]	; (8002b98 <TIM_OC3_SetConfig+0x11c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_OC3_SetConfig+0xbe>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <TIM_OC3_SetConfig+0x120>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_OC3_SetConfig+0xbe>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <TIM_OC3_SetConfig+0x114>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d113      	bne.n	8002b62 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40013400 	.word	0x40013400
 8002b90:	40015000 	.word	0x40015000
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400
 8002b9c:	40014800 	.word	0x40014800

08002ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	031b      	lsls	r3, r3, #12
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <TIM_OC4_SetConfig+0xc8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_OC4_SetConfig+0x8c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <TIM_OC4_SetConfig+0xcc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00f      	beq.n	8002c2c <TIM_OC4_SetConfig+0x8c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <TIM_OC4_SetConfig+0xd0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_OC4_SetConfig+0x8c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a17      	ldr	r2, [pc, #92]	; (8002c74 <TIM_OC4_SetConfig+0xd4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_OC4_SetConfig+0x8c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a16      	ldr	r2, [pc, #88]	; (8002c78 <TIM_OC4_SetConfig+0xd8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_OC4_SetConfig+0x8c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <TIM_OC4_SetConfig+0xdc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d109      	bne.n	8002c40 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40013400 	.word	0x40013400
 8002c70:	40014000 	.word	0x40014000
 8002c74:	40014400 	.word	0x40014400
 8002c78:	40014800 	.word	0x40014800
 8002c7c:	40015000 	.word	0x40015000

08002c80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	041b      	lsls	r3, r3, #16
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <TIM_OC5_SetConfig+0xbc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <TIM_OC5_SetConfig+0x82>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <TIM_OC5_SetConfig+0xc0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00f      	beq.n	8002d02 <TIM_OC5_SetConfig+0x82>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <TIM_OC5_SetConfig+0xc4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_OC5_SetConfig+0x82>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a16      	ldr	r2, [pc, #88]	; (8002d48 <TIM_OC5_SetConfig+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_OC5_SetConfig+0x82>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <TIM_OC5_SetConfig+0xcc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_OC5_SetConfig+0x82>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <TIM_OC5_SetConfig+0xd0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d109      	bne.n	8002d16 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	021b      	lsls	r3, r3, #8
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40013400 	.word	0x40013400
 8002d44:	40014000 	.word	0x40014000
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40014800 	.word	0x40014800
 8002d50:	40015000 	.word	0x40015000

08002d54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	051b      	lsls	r3, r3, #20
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1a      	ldr	r2, [pc, #104]	; (8002e14 <TIM_OC6_SetConfig+0xc0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <TIM_OC6_SetConfig+0x84>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a19      	ldr	r2, [pc, #100]	; (8002e18 <TIM_OC6_SetConfig+0xc4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00f      	beq.n	8002dd8 <TIM_OC6_SetConfig+0x84>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a18      	ldr	r2, [pc, #96]	; (8002e1c <TIM_OC6_SetConfig+0xc8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_OC6_SetConfig+0x84>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <TIM_OC6_SetConfig+0xcc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_OC6_SetConfig+0x84>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <TIM_OC6_SetConfig+0xd0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC6_SetConfig+0x84>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <TIM_OC6_SetConfig+0xd4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d109      	bne.n	8002dec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40013400 	.word	0x40013400
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800
 8002e28:	40015000 	.word	0x40015000

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e06d      	b.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d009      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d004      	beq.n	8002e82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d018      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d10c      	bne.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40013400 	.word	0x40013400
 8002f34:	40015000 	.word	0x40015000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	e06a      	b.n	8003036 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	041b      	lsls	r3, r3, #16
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a16      	ldr	r2, [pc, #88]	; (800304c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d115      	bne.n	8003024 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40013400 	.word	0x40013400
 800304c:	40015000 	.word	0x40015000

08003050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e040      	b.n	80030e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fd fb04 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2224      	movs	r2, #36	; 0x24
 800307c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f82c 	bl	80030ec <UART_SetConfig>
 8003094:	4603      	mov	r3, r0
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e022      	b.n	80030e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f9f4 	bl	8003494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 fa7b 	bl	80035d8 <UART_CheckIdleState>
 80030e2:	4603      	mov	r3, r0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4baa      	ldr	r3, [pc, #680]	; (80033c0 <UART_SetConfig+0x2d4>)
 8003118:	4013      	ands	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	6979      	ldr	r1, [r7, #20]
 8003120:	430b      	orrs	r3, r1
 8003122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a98      	ldr	r2, [pc, #608]	; (80033c4 <UART_SetConfig+0x2d8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d121      	bne.n	80031ac <UART_SetConfig+0xc0>
 8003168:	4b97      	ldr	r3, [pc, #604]	; (80033c8 <UART_SetConfig+0x2dc>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d817      	bhi.n	80031a4 <UART_SetConfig+0xb8>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <UART_SetConfig+0x90>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	0800318d 	.word	0x0800318d
 8003180:	08003199 	.word	0x08003199
 8003184:	0800319f 	.word	0x0800319f
 8003188:	08003193 	.word	0x08003193
 800318c:	2301      	movs	r3, #1
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e0b2      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003192:	2302      	movs	r3, #2
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e0af      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003198:	2304      	movs	r3, #4
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e0ac      	b.n	80032f8 <UART_SetConfig+0x20c>
 800319e:	2308      	movs	r3, #8
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e0a9      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031a4:	2310      	movs	r3, #16
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	bf00      	nop
 80031aa:	e0a5      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a86      	ldr	r2, [pc, #536]	; (80033cc <UART_SetConfig+0x2e0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d123      	bne.n	80031fe <UART_SetConfig+0x112>
 80031b6:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <UART_SetConfig+0x2dc>)
 80031b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c2:	d012      	beq.n	80031ea <UART_SetConfig+0xfe>
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d802      	bhi.n	80031d0 <UART_SetConfig+0xe4>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <UART_SetConfig+0xf2>
 80031ce:	e012      	b.n	80031f6 <UART_SetConfig+0x10a>
 80031d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031d4:	d00c      	beq.n	80031f0 <UART_SetConfig+0x104>
 80031d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031da:	d003      	beq.n	80031e4 <UART_SetConfig+0xf8>
 80031dc:	e00b      	b.n	80031f6 <UART_SetConfig+0x10a>
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e089      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031e4:	2302      	movs	r3, #2
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e086      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031ea:	2304      	movs	r3, #4
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e083      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031f0:	2308      	movs	r3, #8
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e080      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031f6:	2310      	movs	r3, #16
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	bf00      	nop
 80031fc:	e07c      	b.n	80032f8 <UART_SetConfig+0x20c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a73      	ldr	r2, [pc, #460]	; (80033d0 <UART_SetConfig+0x2e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d123      	bne.n	8003250 <UART_SetConfig+0x164>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <UART_SetConfig+0x2dc>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003214:	d012      	beq.n	800323c <UART_SetConfig+0x150>
 8003216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321a:	d802      	bhi.n	8003222 <UART_SetConfig+0x136>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <UART_SetConfig+0x144>
 8003220:	e012      	b.n	8003248 <UART_SetConfig+0x15c>
 8003222:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003226:	d00c      	beq.n	8003242 <UART_SetConfig+0x156>
 8003228:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800322c:	d003      	beq.n	8003236 <UART_SetConfig+0x14a>
 800322e:	e00b      	b.n	8003248 <UART_SetConfig+0x15c>
 8003230:	2300      	movs	r3, #0
 8003232:	77fb      	strb	r3, [r7, #31]
 8003234:	e060      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003236:	2302      	movs	r3, #2
 8003238:	77fb      	strb	r3, [r7, #31]
 800323a:	e05d      	b.n	80032f8 <UART_SetConfig+0x20c>
 800323c:	2304      	movs	r3, #4
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e05a      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003242:	2308      	movs	r3, #8
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003248:	2310      	movs	r3, #16
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	bf00      	nop
 800324e:	e053      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a5f      	ldr	r2, [pc, #380]	; (80033d4 <UART_SetConfig+0x2e8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d123      	bne.n	80032a2 <UART_SetConfig+0x1b6>
 800325a:	4b5b      	ldr	r3, [pc, #364]	; (80033c8 <UART_SetConfig+0x2dc>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003266:	d012      	beq.n	800328e <UART_SetConfig+0x1a2>
 8003268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326c:	d802      	bhi.n	8003274 <UART_SetConfig+0x188>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <UART_SetConfig+0x196>
 8003272:	e012      	b.n	800329a <UART_SetConfig+0x1ae>
 8003274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003278:	d00c      	beq.n	8003294 <UART_SetConfig+0x1a8>
 800327a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800327e:	d003      	beq.n	8003288 <UART_SetConfig+0x19c>
 8003280:	e00b      	b.n	800329a <UART_SetConfig+0x1ae>
 8003282:	2300      	movs	r3, #0
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e037      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003288:	2302      	movs	r3, #2
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e034      	b.n	80032f8 <UART_SetConfig+0x20c>
 800328e:	2304      	movs	r3, #4
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e031      	b.n	80032f8 <UART_SetConfig+0x20c>
 8003294:	2308      	movs	r3, #8
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e02e      	b.n	80032f8 <UART_SetConfig+0x20c>
 800329a:	2310      	movs	r3, #16
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	bf00      	nop
 80032a0:	e02a      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <UART_SetConfig+0x2ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d123      	bne.n	80032f4 <UART_SetConfig+0x208>
 80032ac:	4b46      	ldr	r3, [pc, #280]	; (80033c8 <UART_SetConfig+0x2dc>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d012      	beq.n	80032e0 <UART_SetConfig+0x1f4>
 80032ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032be:	d802      	bhi.n	80032c6 <UART_SetConfig+0x1da>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <UART_SetConfig+0x1e8>
 80032c4:	e012      	b.n	80032ec <UART_SetConfig+0x200>
 80032c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ca:	d00c      	beq.n	80032e6 <UART_SetConfig+0x1fa>
 80032cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032d0:	d003      	beq.n	80032da <UART_SetConfig+0x1ee>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x200>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e00e      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e00b      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e005      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	bf00      	nop
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x20c>
 80032f4:	2310      	movs	r3, #16
 80032f6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003300:	d16e      	bne.n	80033e0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d828      	bhi.n	800335a <UART_SetConfig+0x26e>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0x224>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003335 	.word	0x08003335
 8003314:	0800333d 	.word	0x0800333d
 8003318:	08003345 	.word	0x08003345
 800331c:	0800335b 	.word	0x0800335b
 8003320:	0800334b 	.word	0x0800334b
 8003324:	0800335b 	.word	0x0800335b
 8003328:	0800335b 	.word	0x0800335b
 800332c:	0800335b 	.word	0x0800335b
 8003330:	08003353 	.word	0x08003353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003334:	f7fe fe08 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003338:	61b8      	str	r0, [r7, #24]
        break;
 800333a:	e013      	b.n	8003364 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800333c:	f7fe fe26 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 8003340:	61b8      	str	r0, [r7, #24]
        break;
 8003342:	e00f      	b.n	8003364 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b25      	ldr	r3, [pc, #148]	; (80033dc <UART_SetConfig+0x2f0>)
 8003346:	61bb      	str	r3, [r7, #24]
        break;
 8003348:	e00c      	b.n	8003364 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7fe fd87 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800334e:	61b8      	str	r0, [r7, #24]
        break;
 8003350:	e008      	b.n	8003364 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003356:	61bb      	str	r3, [r7, #24]
        break;
 8003358:	e004      	b.n	8003364 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	77bb      	strb	r3, [r7, #30]
        break;
 8003362:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8086 	beq.w	8003478 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	005a      	lsls	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	441a      	add	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	b29b      	uxth	r3, r3
 8003382:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b0f      	cmp	r3, #15
 8003388:	d916      	bls.n	80033b8 <UART_SetConfig+0x2cc>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d212      	bcs.n	80033b8 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f023 030f 	bic.w	r3, r3, #15
 800339a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	89fa      	ldrh	r2, [r7, #14]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	e05f      	b.n	8003478 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77bb      	strb	r3, [r7, #30]
 80033bc:	e05c      	b.n	8003478 <UART_SetConfig+0x38c>
 80033be:	bf00      	nop
 80033c0:	efff69f3 	.word	0xefff69f3
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40004400 	.word	0x40004400
 80033d0:	40004800 	.word	0x40004800
 80033d4:	40004c00 	.word	0x40004c00
 80033d8:	40005000 	.word	0x40005000
 80033dc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d827      	bhi.n	8003436 <UART_SetConfig+0x34a>
 80033e6:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <UART_SetConfig+0x300>)
 80033e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ec:	08003411 	.word	0x08003411
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003437 	.word	0x08003437
 80033fc:	08003427 	.word	0x08003427
 8003400:	08003437 	.word	0x08003437
 8003404:	08003437 	.word	0x08003437
 8003408:	08003437 	.word	0x08003437
 800340c:	0800342f 	.word	0x0800342f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003410:	f7fe fd9a 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003414:	61b8      	str	r0, [r7, #24]
        break;
 8003416:	e013      	b.n	8003440 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7fe fdb8 	bl	8001f8c <HAL_RCC_GetPCLK2Freq>
 800341c:	61b8      	str	r0, [r7, #24]
        break;
 800341e:	e00f      	b.n	8003440 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <UART_SetConfig+0x3a4>)
 8003422:	61bb      	str	r3, [r7, #24]
        break;
 8003424:	e00c      	b.n	8003440 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003426:	f7fe fd19 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 800342a:	61b8      	str	r0, [r7, #24]
        break;
 800342c:	e008      	b.n	8003440 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	61bb      	str	r3, [r7, #24]
        break;
 8003434:	e004      	b.n	8003440 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	77bb      	strb	r3, [r7, #30]
        break;
 800343e:	bf00      	nop
    }

    if (pclk != 0U)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	085a      	lsrs	r2, r3, #1
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	441a      	add	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	d908      	bls.n	8003474 <UART_SetConfig+0x388>
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d204      	bcs.n	8003474 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e001      	b.n	8003478 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003484:	7fbb      	ldrb	r3, [r7, #30]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	007a1200 	.word	0x007a1200

08003494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01a      	beq.n	80035aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003592:	d10a      	bne.n	80035aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af02      	add	r7, sp, #8
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035e8:	f7fd f912 	bl	8000810 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d10e      	bne.n	800361a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f82d 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e023      	b.n	8003662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d10e      	bne.n	8003646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f817 	bl	800366a <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00d      	b.n	8003662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b09c      	sub	sp, #112	; 0x70
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367a:	e0a5      	b.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003682:	f000 80a1 	beq.w	80037c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fd f8c3 	bl	8000810 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <UART_WaitOnFlagUntilTimeout+0x32>
 8003696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13e      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036a4:	e853 3f00 	ldrex	r3, [r3]
 80036a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b0:	667b      	str	r3, [r7, #100]	; 0x64
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e6      	bne.n	800369c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3308      	adds	r3, #8
 80036d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	663b      	str	r3, [r7, #96]	; 0x60
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80036f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e067      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d04f      	beq.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003736:	d147      	bne.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
 8003762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e6      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3308      	adds	r3, #8
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	613b      	str	r3, [r7, #16]
   return(result);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	66bb      	str	r3, [r7, #104]	; 0x68
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003794:	623a      	str	r2, [r7, #32]
 8003796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e010      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4013      	ands	r3, r2
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f43f af4a 	beq.w	800367c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3770      	adds	r7, #112	; 0x70
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <__libc_init_array>:
 80037f4:	b570      	push	{r4, r5, r6, lr}
 80037f6:	4e0d      	ldr	r6, [pc, #52]	; (800382c <__libc_init_array+0x38>)
 80037f8:	4c0d      	ldr	r4, [pc, #52]	; (8003830 <__libc_init_array+0x3c>)
 80037fa:	1ba4      	subs	r4, r4, r6
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	2500      	movs	r5, #0
 8003800:	42a5      	cmp	r5, r4
 8003802:	d109      	bne.n	8003818 <__libc_init_array+0x24>
 8003804:	4e0b      	ldr	r6, [pc, #44]	; (8003834 <__libc_init_array+0x40>)
 8003806:	4c0c      	ldr	r4, [pc, #48]	; (8003838 <__libc_init_array+0x44>)
 8003808:	f000 f820 	bl	800384c <_init>
 800380c:	1ba4      	subs	r4, r4, r6
 800380e:	10a4      	asrs	r4, r4, #2
 8003810:	2500      	movs	r5, #0
 8003812:	42a5      	cmp	r5, r4
 8003814:	d105      	bne.n	8003822 <__libc_init_array+0x2e>
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800381c:	4798      	blx	r3
 800381e:	3501      	adds	r5, #1
 8003820:	e7ee      	b.n	8003800 <__libc_init_array+0xc>
 8003822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003826:	4798      	blx	r3
 8003828:	3501      	adds	r5, #1
 800382a:	e7f2      	b.n	8003812 <__libc_init_array+0x1e>
 800382c:	0800389c 	.word	0x0800389c
 8003830:	0800389c 	.word	0x0800389c
 8003834:	0800389c 	.word	0x0800389c
 8003838:	080038a0 	.word	0x080038a0

0800383c <memset>:
 800383c:	4402      	add	r2, r0
 800383e:	4603      	mov	r3, r0
 8003840:	4293      	cmp	r3, r2
 8003842:	d100      	bne.n	8003846 <memset+0xa>
 8003844:	4770      	bx	lr
 8003846:	f803 1b01 	strb.w	r1, [r3], #1
 800384a:	e7f9      	b.n	8003840 <memset+0x4>

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
